CREATE OR REPLACE PACKAGE pktblJp_Test
is 
    ---------------
    -- VARIABLES
    ---------------
    -- Cursor para accesar Jp_Test
    cursor cuJp_Test
    (
		inuTest_Id in Jp_Test.Test_Id%type
    )
    is
        SELECT *
        FROM Jp_Test
        WHERE  Test_Id = inuTest_Id;


	-- Define colecciones de cada columna de la tabla 
	type tyTest_Id is table of Jp_Test.Test_Id%type index by binary_integer;
	type tyTest_Des is table of Jp_Test.Test_Des%type index by binary_integer;

    /* Tipo Tabla de records*/
    type tytbRowJp_Test is table of Jp_Test%rowtype index by binary_integer;

    type tytbJp_Test is record
	(
        Test_Id tyTest_Id,
        Test_Des tyTest_Des
	);


    ---------------
    -- METHODS
    ---------------

    FUNCTION fsbVersion
    RETURN varchar2;

	function fsbGetMessageDescription
	(
		inuMenscodi	IN number
	)
	return varchar2;

	PROCEDURE insRecord
	(
		ircRecord in Jp_Test%rowtype
	);

	PROCEDURE InsRecords
	(
		irctbRecord in out nocopy tytbJp_Test
	);

	PROCEDURE InsForEachColumn
	(
		inuTest_Id in Jp_Test.Test_Id%type,
		isbTest_Des in Jp_Test.Test_Des%type
	);

	PROCEDURE InsForEachColumnBulk
	(
		inuTest_Id in out nocopy tyTest_Id,
		isbTest_Des in out nocopy tyTest_Des
	);

	PROCEDURE ClearMemory;

	PROCEDURE DelRecord
	(
		inuTest_Id in Jp_Test.Test_Id%type
	);

	PROCEDURE UpRecord
	(
		ircRecord in Jp_Test%rowtype
	);

	PROCEDURE DelRecords
	(
		inuTest_Id in out nocopy tyTest_Id
	);

	FUNCTION fblExist
	(
		inuTest_Id in Jp_Test.Test_Id%type,
		inuCACHE in number default 1
	)
	RETURN boolean;

	FUNCTION frcGetRecord
	(
		inuTest_Id in Jp_Test.Test_Id%type,
		inuCACHE in number default 1
	)
	RETURN Jp_Test%rowtype;

	PROCEDURE AccKey
	(
		inuTest_Id in Jp_Test.Test_Id%type,
		inuCACHE in number default 1
	);

	PROCEDURE ValidateDupValues
	(
		inuTest_Id in Jp_Test.Test_Id%type,
		inuCACHE in number default 1
	);

	PROCEDURE UpdTest_Des
	(
		inuTest_Id in Jp_Test.Test_Id%type,
		isbTest_Des$ in Jp_Test.Test_Des%type
	);

	function fnuGetTest_Id
	(
		inuTest_Id in Jp_Test.Test_Id%type,
		inuCACHE in number default 1
	)
	RETURN Jp_Test.Test_Id%type;

	function fsbGetTest_Des
	(
		inuTest_Id in Jp_Test.Test_Id%type,
		inuCACHE in number default 1
	)
	RETURN Jp_Test.Test_Des%type;


END pktblJp_Test;
/
CREATE OR REPLACE PACKAGE BODY pktblJp_Test
IS

   -------------------------
   -- PRIVATE VARIABLES
   -------------------------
   -- Record Tabla Jp_Test
   rcJp_Test cuJp_Test%rowtype;
   -- Record nulo de la Tabla Jp_Test
   rcRecordNull Jp_Test%rowtype;
   -----------------
   -- CONSTANTES
   -----------------
	csbVersion constant varchar2(20) := 'SAO414826';
	CACHE constant number := 1; -- Buscar en Cache
	-------------------------
	-- PRIVATE CONSTANTS
	-------------------------
   cnuRECORD_NO_EXISTE constant number(1) := 1; -- Reg. no esta en BD
	cnuRECORD_YA_EXISTE constant number(1) := 2; -- Reg. ya esta en BD
	cbsTable      constant varchar2(30) := 'JP_TEST'; -- Nombre tabla
	cnuGeEntityId constant varchar2(30) := 9188; -- Id de Ge_entity
	-------------------------
	-- PRIVATE METHODS
	-------------------------
	function fsbGetMessageDescription
	(
		inuMenscodi	IN number
	)
	return varchar2
	is 
	      sbMessage varchar2(32000);
	      sbTableDescription varchar2(32000);
	BEGIN
	    if (cnuGeEntityId > 0 and dage_entity.fblExist (cnuGeEntityId))  then
	          sbTableDescription:= dage_entity.fsbGetDisplay_name(cnuGeEntityId);
	    end if;

		sbMessage := dage_message.fsbgetdescription(inuMenscodi);
	    if sbTableDescription is null then
	          sbMessage := replace(sbMessage,'%s1',cbsTable);
	    else
	          sbMessage := replace(sbMessage,'%s1','(' ||cbsTable||' - '||sbTableDescription ||')');
	    end if;
		return sbMessage ;
	END fsbGetMessageDescription;

	function fblInMemory
	(
		inuTest_Id in Jp_Test.Test_Id%type
	)
	RETURN boolean is
	BEGIN
		pkErrors.Push('pktblJp_Test.fblInMemory');
		if(
			rcJp_Test.Test_Id = inuTest_Id
		) then
			pkErrors.Pop;
			return(TRUE);
		end if;
		pkErrors.Pop;
		return( FALSE );
	END fblInMemory;

	procedure LoadRecord
	(
		inuTest_Id in Jp_Test.Test_Id%type
	) is
	BEGIN
		pkErrors.Push('pktblJp_Test.LoadRecord');
		if cuJp_Test%isopen then
			close cuJp_Test;
		end if;
		-- Accesa Jp_Test de la BD;
		open cuJp_Test(inuTest_Id);

		fetch cuJp_Test into rcJp_Test;
		if ( cuJp_Test%notfound ) then 
			close cuJp_Test;
			pkErrors.Pop;
			rcJp_Test := rcRecordNull;
			return;
		end if;
		close cuJp_Test;
		pkErrors.Pop;
	END LoadRecord;

	procedure Load
	(
		inuTest_Id in Jp_Test.Test_Id%type
	) is
	BEGIN
		pkErrors.Push('pktblJp_Test.Load');
		LoadRecord(inuTest_Id);

		-- Evalua si se encontro el registro en la Base de datos;
		if ( rcJp_Test.Test_Id is null ) then
			pkErrors.Pop;
			raise NO_DATA_FOUND;
		end if;
		pkErrors.Pop;
	EXCEPTION
		when NO_DATA_FOUND then
			Errors.setbsserror(cnuRECORD_NO_EXISTE,fsbGetMessageDescription(cnuRECORD_NO_EXISTE));
			raise LOGIN_DENIED;
	END Load;

    FUNCTION fsbVersion
    RETURN varchar2
	IS
	BEGIN
		return csbVersion;
	END fsbVersion;

	PROCEDURE AccKey
	(
		inuTest_Id in Jp_Test.Test_Id%type,
		inuCACHE in number default 1
	)
	is
	BEGIN
		pkErrors.Push('pktblJp_Test.AccKey');
		-- Valida si debe buscar primero en memoria Cache
		if ( inuCACHE = CACHE ) then
            if ( fblInMemory(inuTest_Id)) then
				pkErrors.Pop;
				return;
			end if;
		end if;

		Load(inuTest_Id);
		pkErrors.Pop;
	EXCEPTION
		when LOGIN_DENIED then
			pkErrors.Pop;
			raise LOGIN_DENIED;
	END AccKey;

	procedure ClearMemory is
	BEGIN
		pkErrors.Push('pktblJp_Test.ClearMemory');
		rcJp_Test := rcRecordNull;
		pkErrors.Pop;
	END ClearMemory;

	PROCEDURE DelRecord
	(
		inuTest_Id in Jp_Test.Test_Id%type
	)	 is
	BEGIN
		pkErrors.Push('pktblJp_Test.DelRecord');
		-- Elimina registro de la Tabla Jp_Test
		DELETE Jp_Test
		WHERE
       		Test_Id=inuTest_Id;
		if ( sql%notfound ) then
			pkErrors.Pop;
			raise NO_DATA_FOUND;
		end if;
		ClearMemory;
		pkErrors.Pop;
	EXCEPTION
		when NO_DATA_FOUND then
			Errors.setbsserror(cnuRECORD_NO_EXISTE,fsbGetMessageDescription(cnuRECORD_NO_EXISTE));
			raise LOGIN_DENIED;
	END DelRecord;

	PROCEDURE DelRecords
	(
		inuTest_Id in out nocopy tyTest_Id
	) is
	BEGIN
		pkErrors.Push('pktblJp_Test.DelRecords');
		-- Elimina registro de la Tabla Jp_Test
		FORALL indx in inuTest_Id.first .. inuTest_Id.last
		DELETE Jp_Test
		WHERE 
            Test_Id = inuTest_Id(indx);
		if ( sql%notfound ) then
			pkErrors.Pop;
			raise NO_DATA_FOUND;
		end if;
		ClearMemory;
		pkErrors.Pop;
	EXCEPTION
		when NO_DATA_FOUND then
			Errors.setbsserror(cnuRECORD_NO_EXISTE,fsbGetMessageDescription(cnuRECORD_NO_EXISTE));
			raise LOGIN_DENIED;
	END DelRecords;

	PROCEDURE InsForEachColumn
	(
		inuTest_Id in Jp_Test.Test_Id%type,
		isbTest_Des in Jp_Test.Test_Des%type
	) is
	   rcRecord Jp_Test%rowtype;
	BEGIN
		pkErrors.Push('pktblJp_Test.InsForEachColumn');
		rcRecord.Test_Id := inuTest_Id;
		rcRecord.Test_Des := isbTest_Des;
		InsRecord( rcRecord );
		pkErrors.Pop;
	EXCEPTION
		when LOGIN_DENIED then
			pkErrors.Pop;
			raise LOGIN_DENIED;
	END InsForEachColumn;

	PROCEDURE InsForEachColumnBulk
	(
		inuTest_Id in out nocopy tyTest_Id,
		isbTest_Des in out nocopy tyTest_Des
	) is
	BEGIN
		pkErrors.Push('pktblJp_Test.InsForEachColumnBulk');
		FORALL indx in inuTest_Id.first .. inuTest_Id.last
		INSERT INTO Jp_Test
		(
			Test_Id,
			Test_Des
		)
		VALUES
		(
			inuTest_Id(indx),
			isbTest_Des(indx)
		);
		ClearMemory;
		pkErrors.Pop;
	EXCEPTION
		when DUP_VAL_ON_INDEX then
			Errors.setbsserror(cnuRECORD_YA_EXISTE,fsbGetMessageDescription(cnuRECORD_YA_EXISTE));
			pkErrors.Pop;
			raise LOGIN_DENIED;
	END InsForEachColumnBulk;

	PROCEDURE insRecord
	(
		ircRecord in Jp_Test%rowtype
	)
	is
	BEGIN
		pkErrors.Push('pktblJp_Test.InsRecord');
		INSERT INTO Jp_Test
		(
			Test_Id,
			Test_Des
		)
		VALUES
		(
			ircRecord.Test_Id,
			ircRecord.Test_Des
		);
		ClearMemory;
		pkErrors.Pop;
	EXCEPTION
		when DUP_VAL_ON_INDEX then
			Errors.setbsserror(cnuRECORD_YA_EXISTE,fsbGetMessageDescription(cnuRECORD_YA_EXISTE));
			pkErrors.Pop;
			raise LOGIN_DENIED;
	END InsRecord;

	PROCEDURE InsRecords
	(
		irctbRecord in out nocopy tytbJp_Test
	)
	is
	BEGIN
		pkErrors.Push('pktblJp_Test.InsRecords');
		FORALL indx in irctbRecord.Test_Id.first .. irctbRecord.Test_Id.last
		INSERT INTO Jp_Test
		(
			Test_Id,
			Test_Des
		)
		VALUES
		(
			irctbRecord.Test_Id(indx),
			irctbRecord.Test_Des(indx)
		);
		ClearMemory;
		pkErrors.Pop;
	EXCEPTION
		when DUP_VAL_ON_INDEX then
			Errors.setbsserror(cnuRECORD_YA_EXISTE,fsbGetMessageDescription(cnuRECORD_YA_EXISTE));
			pkErrors.Pop;
			raise LOGIN_DENIED;
	END InsRecords;

	PROCEDURE UpRecord
	(
		ircRecord in Jp_Test%rowtype
	)
	is
	BEGIN
		pkErrors.Push('pktblJp_Test.UpRecord');
		update Jp_Test
		SET
				Test_Des = ircRecord.Test_Des
		WHERE	Test_Id = ircRecord.Test_Id;
		if ( sql%notfound ) then
			pkErrors.Pop;
			raise NO_DATA_FOUND;
		end if;
		--Se limpia memoria
		ClearMemory;
		pkErrors.Pop;
	EXCEPTION
		when NO_DATA_FOUND then
			Errors.setbsserror(cnuRECORD_NO_EXISTE,fsbGetMessageDescription(cnuRECORD_NO_EXISTE));
			raise LOGIN_DENIED;
	END UpRecord;

	PROCEDURE ValidateDupValues
	(
		inuTest_Id in Jp_Test.Test_Id%type,
		inuCACHE in number default 1
	)
	is
	BEGIN
		pkErrors.Push('pktblJp_Test.ValidateDupValues');
		-- Valida si el registro ya existe
		if ( fblExist( inuTest_Id, inuCACHE ) ) then
			Errors.setbsserror(cnuRECORD_YA_EXISTE,fsbGetMessageDescription(cnuRECORD_YA_EXISTE));
			raise LOGIN_DENIED;
		end if;
		pkErrors.Pop;
	EXCEPTION
		when LOGIN_DENIED then
			pkErrors.Pop;
			raise LOGIN_DENIED;
	END ValidateDupValues;

	FUNCTION fblExist
	(
		inuTest_Id in Jp_Test.Test_Id%type,
		inuCACHE in number default 1
	)
	RETURN boolean is
	BEGIN
		pkErrors.Push('pktblJp_Test.fblExist');
		-- Evalua si debe Buscar en memoria cache primero
		if ( inuCACHE = CACHE ) then
			if ( fblInMemory( inuTest_Id) )
			then
				pkErrors.Pop;
				return( TRUE );
			end if;
		end if;
		LoadRecord( inuTest_Id);
		if ( rcJp_Test.Test_Id is null ) then
			pkErrors.Pop;
			return( FALSE );
		end if;
		pkErrors.Pop;
		return( TRUE );
	END fblExist;

	FUNCTION frcGetRecord
	(
		inuTest_Id in Jp_Test.Test_Id%type,
		inuCACHE in number default 1
	)
	RETURN Jp_Test%rowtype
	is
	BEGIN
		pkErrors.Push('pktblJp_Test.frcGetRecord');
		AccKey ( inuTest_Id, inuCACHE);
		pkErrors.Pop;
		return ( rcJp_Test );
	EXCEPTION
		when LOGIN_DENIED then
			pkErrors.Pop;
			raise LOGIN_DENIED;
	END frcGetRecord;

	PROCEDURE UpdTest_Des
	(
		inuTest_Id in Jp_Test.Test_Id%type,
		isbTest_Des$ in Jp_Test.Test_Des%type
	)
	is
	BEGIN
		pkErrors.Push('pktblJp_Test.UpdTest_Des');
		UPDATE Jp_Test
		SET
			Test_Des = isbTest_Des$
		WHERE  Test_Id = inuTest_Id;
		if ( sql%notfound ) then
			pkErrors.Pop;
			raise NO_DATA_FOUND;
		end if;
		--Se limpia memoria
		ClearMemory;
		pkErrors.Pop;
	EXCEPTION
		when NO_DATA_FOUND then
			Errors.setbsserror(cnuRECORD_NO_EXISTE,fsbGetMessageDescription(cnuRECORD_NO_EXISTE));
			raise LOGIN_DENIED;
	END UpdTest_Des;

	function fnuGetTest_Id
	(
		inuTest_Id in Jp_Test.Test_Id%type,
		inuCACHE in number default 1
	)
	RETURN Jp_Test.Test_Id%type
	is
	BEGIN
		pkErrors.Push('pktblJp_Test.fnuGetTest_Id');
		AccKey ( inuTest_Id, inuCACHE );
		pkErrors.Pop;
		return ( rcJp_Test.Test_Id);
	EXCEPTION
		when LOGIN_DENIED then
			pkErrors.Pop;
			raise LOGIN_DENIED;
	END fnuGetTest_Id;

	function fsbGetTest_Des
	(
		inuTest_Id in Jp_Test.Test_Id%type,
		inuCACHE in number default 1
	)
	RETURN Jp_Test.Test_Des%type
	is
	BEGIN
		pkErrors.Push('pktblJp_Test.fsbGetTest_Des');
		AccKey ( inuTest_Id, inuCACHE );
		pkErrors.Pop;
		return ( rcJp_Test.Test_Des);
	EXCEPTION
		when LOGIN_DENIED then
			pkErrors.Pop;
			raise LOGIN_DENIED;
	END fsbGetTest_Des;

end pktblJp_Test;
/