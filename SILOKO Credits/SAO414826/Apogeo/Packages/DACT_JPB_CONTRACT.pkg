CREATE OR REPLACE PACKAGE DACT_jpb_contract
is 
	/* Cursor general para acceso por Llave Primaria */
	CURSOR cuRecord 
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type
	)
	IS
		SELECT CT_jpb_contract.*,CT_jpb_contract.rowid
		FROM CT_jpb_contract
		WHERE  Contract_Id = inuContract_Id;


	/* Cursor general para acceso por RowId */
	CURSOR cuRecordByRowId
	(
		irirowid in varchar2
	)
	IS
        SELECT CT_jpb_contract.*,CT_jpb_contract.rowid
		FROM CT_jpb_contract
		WHERE 
			rowId = irirowid;


	/* Subtipos */
	subtype styCT_jpb_contract  is  cuRecord%rowtype;
	type    tyRefCursor is  REF CURSOR;

	/*Tipos*/
	type tytbCT_jpb_contract is table of styCT_jpb_contract index by binary_integer;
	type tyrfRecords is ref cursor return styCT_jpb_contract;

	/* Tipos referenciando al registro */
	type tytbContract_Id is table of CT_jpb_contract.Contract_Id%type index by binary_integer;
	type tytbDescription is table of CT_jpb_contract.Description%type index by binary_integer;
	type tytbTotal_Amount is table of CT_jpb_contract.Total_Amount%type index by binary_integer;
	type tytbOverreaching_Percent is table of CT_jpb_contract.Overreaching_Percent%type index by binary_integer;
	type tytbContract_Type_Id is table of CT_jpb_contract.Contract_Type_Id%type index by binary_integer;
	type tytbContractor_Id is table of CT_jpb_contract.Contractor_Id%type index by binary_integer;
	type tytbrowid is table of rowid index by binary_integer;

	type tyrcCT_jpb_contract is record
	(
		Contract_Id   tytbContract_Id,
		Description   tytbDescription,
		Total_Amount   tytbTotal_Amount,
		Overreaching_Percent   tytbOverreaching_Percent,
		Contract_Type_Id   tytbContract_Type_Id,
		Contractor_Id   tytbContractor_Id,
		row_id tytbrowid
	);


	/***** Metodos Publicos ****/

    FUNCTION fsbVersion
    RETURN varchar2;

	FUNCTION fsbGetMessageDescription
	return varchar2;

	PROCEDURE ClearMemory;

	FUNCTION fblExist
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type
	)
	RETURN boolean;

	PROCEDURE AccKey
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type
	);

	PROCEDURE AccKeyByRowId
	(
		iriRowID    in rowid
	);

	PROCEDURE ValDuplicate
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type
	);

	PROCEDURE getRecord
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type,
		orcRecord out nocopy styCT_jpb_contract
	);

	FUNCTION frcGetRcData
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type
	)
	RETURN styCT_jpb_contract;

	FUNCTION frcGetRcData
	RETURN styCT_jpb_contract;

	FUNCTION frcGetRecord
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type
	)
	RETURN styCT_jpb_contract;

	PROCEDURE getRecords 
	(
		isbQuery in varchar2,
		otbResult out nocopy tytbCT_jpb_contract
	);

	FUNCTION frfGetRecords
	(
		isbCriteria in varchar2 default null,
		iblLock in boolean default false
	)
	RETURN tyRefCursor;

	PROCEDURE insRecord
	(
		ircCT_jpb_contract in styCT_jpb_contract
	);

	PROCEDURE insRecord
	(
		ircCT_jpb_contract in styCT_jpb_contract,
        orirowid   out varchar2
	);

	PROCEDURE insRecords
	(
		iotbCT_jpb_contract in out nocopy tytbCT_jpb_contract
	);

	PROCEDURE delRecord
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type,
		inuLock in number default 1
	);

	PROCEDURE delByRowID
	(
		iriRowID    in rowid,
		inuLock in number default 1
	);

	PROCEDURE delRecords
	(
		iotbCT_jpb_contract in out nocopy tytbCT_jpb_contract,
		inuLock in number default 1
	);

	PROCEDURE updRecord
	(
		ircCT_jpb_contract in styCT_jpb_contract,
		inuLock in number default 0
	);

	PROCEDURE updRecords
	(
		iotbCT_jpb_contract in out nocopy tytbCT_jpb_contract,
		inuLock in number default 1
	);

	PROCEDURE updDescription
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type,
		isbDescription$ in CT_jpb_contract.Description%type,
		inuLock in number default 0
	);

	PROCEDURE updTotal_Amount
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type,
		inuTotal_Amount$ in CT_jpb_contract.Total_Amount%type,
		inuLock in number default 0
	);

	PROCEDURE updOverreaching_Percent
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type,
		inuOverreaching_Percent$ in CT_jpb_contract.Overreaching_Percent%type,
		inuLock in number default 0
	);

	PROCEDURE updContract_Type_Id
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type,
		inuContract_Type_Id$ in CT_jpb_contract.Contract_Type_Id%type,
		inuLock in number default 0
	);

	PROCEDURE updContractor_Id
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type,
		inuContractor_Id$ in CT_jpb_contract.Contractor_Id%type,
		inuLock in number default 0
	);

	FUNCTION fnuGetContract_Id
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type,
		inuRaiseError in number default 1
	)
	RETURN CT_jpb_contract.Contract_Id%type;

	FUNCTION fsbGetDescription
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type,
		inuRaiseError in number default 1
	)
	RETURN CT_jpb_contract.Description%type;

	FUNCTION fnuGetTotal_Amount
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type,
		inuRaiseError in number default 1
	)
	RETURN CT_jpb_contract.Total_Amount%type;

	FUNCTION fnuGetOverreaching_Percent
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type,
		inuRaiseError in number default 1
	)
	RETURN CT_jpb_contract.Overreaching_Percent%type;

	FUNCTION fnuGetContract_Type_Id
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type,
		inuRaiseError in number default 1
	)
	RETURN CT_jpb_contract.Contract_Type_Id%type;

	FUNCTION fnuGetContractor_Id
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type,
		inuRaiseError in number default 1
	)
	RETURN CT_jpb_contract.Contractor_Id%type;

	PROCEDURE LockByPk
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type,
		orcCT_jpb_contract  out styCT_jpb_contract
	);

	PROCEDURE LockByRowID
	(
		irirowid    in  varchar2,
		orcCT_jpb_contract  out styCT_jpb_contract
	);

	PROCEDURE SetUseCache
	(
		iblUseCache    in  boolean
	);
END DACT_jpb_contract;
/
CREATE OR REPLACE PACKAGE BODY DACT_jpb_contract
IS

    /*constantes locales al paquete*/
    cnuRECORD_NOT_EXIST constant number(1) := 1;
    cnuRECORD_ALREADY_EXIST constant number(1) := 2;
    cnuAPPTABLEBUSSY constant number(4) := 6951;
    cnuINS_PK_NULL constant number(4):= 1682;
    cnuRECORD_HAVE_CHILDREN constant number(4):= -2292;
    csbVersion   CONSTANT VARCHAR2(20) := 'SAO414826';
    csbTABLEPARAMETER   CONSTANT VARCHAR2(30) := 'CT_JPB_CONTRACT';
	 cnuGeEntityId constant varchar2(30) := 9318; -- Id de Ge_entity

	/* Cursor para bloqueo de un registro por llave primaria */
	CURSOR cuLockRcByPk 
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type
	)
	IS
		SELECT CT_jpb_contract.*,CT_jpb_contract.rowid 
		FROM CT_jpb_contract
		WHERE  Contract_Id = inuContract_Id
		FOR UPDATE NOWAIT;

	/* Cursor para bloqueo de un registro por rowid */
	CURSOR cuLockRcbyRowId 
	(
		irirowid in varchar2
	)
	IS
		SELECT CT_jpb_contract.*,CT_jpb_contract.rowid 
		FROM CT_jpb_contract
		WHERE 
			rowId = irirowid
		FOR UPDATE NOWAIT;


	/*Tipos*/
	type tyrfCT_jpb_contract is ref cursor;

	/*Variables Globales*/
	rcRecOfTab tyrcCT_jpb_contract;

	rcData cuRecord%rowtype;

    blDAO_USE_CACHE    boolean := null;


	/* Metodos privados */
	FUNCTION fsbGetMessageDescription
	return varchar2
	is 
	      sbTableDescription varchar2(32000);
	BEGIN
	    if (cnuGeEntityId > 0 and dage_entity.fblExist (cnuGeEntityId))  then
	          sbTableDescription:= dage_entity.fsbGetDisplay_name(cnuGeEntityId);
	    else
	          sbTableDescription:= csbTABLEPARAMETER;
	    end if;

		return sbTableDescription ;
	END;
	PROCEDURE GetDAO_USE_CACHE
	IS
	BEGIN
	    if ( blDAO_USE_CACHE is null ) then
	        blDAO_USE_CACHE :=  ge_boparameter.fsbget('DAO_USE_CACHE') = 'Y';
	    end if;
	END;
	FUNCTION fsbPrimaryKey( rcI in styCT_jpb_contract default rcData )
	return varchar2
	IS
		sbPk varchar2(500);
	BEGIN
		sbPk:='[';
		sbPk:=sbPk||ut_convert.fsbToChar(rcI.Contract_Id);
		sbPk:=sbPk||']';
		return sbPk;
	END;
	PROCEDURE LockByPk
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type,
		orcCT_jpb_contract  out styCT_jpb_contract
	)
	IS
		rcError styCT_jpb_contract;
	BEGIN
		rcError.Contract_Id:=inuContract_Id;

		Open cuLockRcByPk(inuContract_Id);

		fetch cuLockRcByPk into orcCT_jpb_contract;
		if cuLockRcByPk%notfound  then
			close cuLockRcByPk;
			raise no_data_found;
		end if;
		close cuLockRcByPk ;
	EXCEPTION
		when no_data_found then
			if cuLockRcByPk%isopen then
				close cuLockRcByPk;
			end if;
			Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '|| fsbPrimaryKey(rcError));
			raise ex.CONTROLLED_ERROR;
		when ex.RESOURCE_BUSY THEN
			if cuLockRcByPk%isopen then
				close cuLockRcByPk;
			end if;
			errors.setError(cnuAPPTABLEBUSSY,fsbPrimaryKey(rcError)||'|'|| fsbGetMessageDescription );
			raise ex.controlled_error;
		when others then
			if cuLockRcByPk%isopen then
				close cuLockRcByPk;
			end if;
			raise;
	END;
	PROCEDURE LockByRowID
	(
		irirowid    in  varchar2,
		orcCT_jpb_contract  out styCT_jpb_contract
	)
	IS
	BEGIN
		Open cuLockRcbyRowId
		(
			irirowid
		);

		fetch cuLockRcbyRowId into orcCT_jpb_contract;
		if cuLockRcbyRowId%notfound  then
			close cuLockRcbyRowId;
			raise no_data_found;
		end if;
		close cuLockRcbyRowId;
	EXCEPTION
		when no_data_found then
			if cuLockRcbyRowId%isopen then
				close cuLockRcbyRowId;
			end if;
			Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' rowid=['||iriRowID||']');
			raise ex.CONTROLLED_ERROR;
		when ex.RESOURCE_BUSY THEN
			if cuLockRcbyRowId%isopen then
				close cuLockRcbyRowId;
			end if;
			errors.setError(cnuAPPTABLEBUSSY,'rowid=['||irirowid||']|'||fsbGetMessageDescription );
			raise ex.controlled_error;
		when others then
			if cuLockRcbyRowId%isopen then
				close cuLockRcbyRowId;
			end if;
			raise;
	END;
	PROCEDURE DelRecordOfTables
	(
		itbCT_jpb_contract  in out nocopy tytbCT_jpb_contract
	)
	IS
	BEGIN
			rcRecOfTab.Contract_Id.delete;
			rcRecOfTab.Description.delete;
			rcRecOfTab.Total_Amount.delete;
			rcRecOfTab.Overreaching_Percent.delete;
			rcRecOfTab.Contract_Type_Id.delete;
			rcRecOfTab.Contractor_Id.delete;
			rcRecOfTab.row_id.delete;
	END;
	PROCEDURE FillRecordOfTables
	(
		itbCT_jpb_contract  in out nocopy tytbCT_jpb_contract,
		oblUseRowId out boolean
	)
	IS
	BEGIN
		DelRecordOfTables(itbCT_jpb_contract);

		for n in itbCT_jpb_contract.first .. itbCT_jpb_contract.last loop
			rcRecOfTab.Contract_Id(n) := itbCT_jpb_contract(n).Contract_Id;
			rcRecOfTab.Description(n) := itbCT_jpb_contract(n).Description;
			rcRecOfTab.Total_Amount(n) := itbCT_jpb_contract(n).Total_Amount;
			rcRecOfTab.Overreaching_Percent(n) := itbCT_jpb_contract(n).Overreaching_Percent;
			rcRecOfTab.Contract_Type_Id(n) := itbCT_jpb_contract(n).Contract_Type_Id;
			rcRecOfTab.Contractor_Id(n) := itbCT_jpb_contract(n).Contractor_Id;
			rcRecOfTab.row_id(n) := itbCT_jpb_contract(n).rowid;

			-- Indica si el rowid es Nulo
			oblUseRowId:=rcRecOfTab.row_id(n) is NOT NULL;
		end loop;
	END;

	PROCEDURE Load
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type
	)
	IS
		rcRecordNull cuRecord%rowtype;
	BEGIN
		if cuRecord%isopen then
			close cuRecord;
		end if;
		open cuRecord(inuContract_Id);

		fetch cuRecord into rcData;
		if cuRecord%notfound  then
			close cuRecord;
			rcData := rcRecordNull;
			raise no_data_found;
		end if;
		close cuRecord;
	END;
	PROCEDURE LoadByRowId
	(
		irirowid in varchar2
	)
	IS
		rcRecordNull cuRecordByRowId%rowtype;
	BEGIN
		if cuRecordByRowId%isopen then
			close cuRecordByRowId;
		end if;
		open cuRecordByRowId(irirowid);

		fetch cuRecordByRowId into rcData;
		if cuRecordByRowId%notfound  then
			close cuRecordByRowId;
			rcData := rcRecordNull;
			raise no_data_found;
		end if;
		close cuRecordByRowId;
	END;
	FUNCTION fblAlreadyLoaded
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type
	)
	RETURN boolean
	IS
	BEGIN
		if (
			inuContract_Id = rcData.Contract_Id
		   ) then
			return ( true );
		end if;
		return (false);
	END;

	/***** Fin metodos privados *****/

	/***** Metodos publicos ******/
    FUNCTION fsbVersion
    RETURN varchar2
	IS
	BEGIN
		return csbVersion;
	END;

	PROCEDURE ClearMemory
	IS
		rcRecordNull cuRecord%rowtype;
	BEGIN
		rcData := rcRecordNull;
	END;
	FUNCTION fblExist
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type
	)
	RETURN boolean
	IS
	BEGIN
		Load(inuContract_Id);
		return(TRUE);
	EXCEPTION
		when no_data_found then
			return(FALSE);
	END;
	PROCEDURE AccKey
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type
	)
	IS
		rcError styCT_jpb_contract;
	BEGIN
		rcError.Contract_Id:=inuContract_Id;

		Load(inuContract_Id);
	EXCEPTION
		when no_data_found then
			Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '||fsbPrimaryKey(rcError));
			raise ex.CONTROLLED_ERROR;
	END;
	PROCEDURE AccKeyByRowId
	(
		iriRowID    in rowid
	)
	IS
	BEGIN
		LoadByRowId(iriRowID);
	EXCEPTION
		when no_data_found then
            Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' rowid=['||iriRowID||']');
            raise ex.CONTROLLED_ERROR;
	END;
	PROCEDURE ValDuplicate
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type
	)
	IS
	BEGIN
		Load(inuContract_Id);
		Errors.setError(cnuRECORD_ALREADY_EXIST,fsbGetMessageDescription||' '||fsbPrimaryKey);
		raise ex.CONTROLLED_ERROR;

	EXCEPTION
		when no_data_found then
			null;
	END;
	PROCEDURE getRecord
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type,
		orcRecord out nocopy styCT_jpb_contract
	)
	IS
		rcError styCT_jpb_contract;
	BEGIN
		rcError.Contract_Id:=inuContract_Id;

		Load(inuContract_Id);
		orcRecord := rcData;
	EXCEPTION
		when no_data_found then
			Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '|| fsbPrimaryKey(rcError));
			raise ex.CONTROLLED_ERROR;
	END;
	FUNCTION frcGetRecord
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type
	)
	RETURN styCT_jpb_contract
	IS
		rcError styCT_jpb_contract;
	BEGIN
		rcError.Contract_Id:=inuContract_Id;

		Load(inuContract_Id);
		return(rcData);
	EXCEPTION
		when no_data_found then
			Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '|| fsbPrimaryKey(rcError));
			raise ex.CONTROLLED_ERROR;
	END;
	FUNCTION frcGetRcData
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type
	)
	RETURN styCT_jpb_contract
	IS
		rcError styCT_jpb_contract;
	BEGIN
		rcError.Contract_Id:=inuContract_Id;
        -- si usa cache y esta cargado retorna
		if  blDAO_USE_CACHE AND fblAlreadyLoaded(inuContract_Id) then
			 return(rcData);
		end if;
		Load(inuContract_Id);
		return(rcData);
	EXCEPTION
		when no_data_found then
			Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '|| fsbPrimaryKey(rcError));
			raise ex.CONTROLLED_ERROR;
	END;
	FUNCTION frcGetRcData
	RETURN styCT_jpb_contract
	IS
	BEGIN
		return(rcData);
	END;
	PROCEDURE getRecords
	(
		isbQuery in varchar2,
		otbResult out nocopy tytbCT_jpb_contract
	)
	IS
		rfCT_jpb_contract tyrfCT_jpb_contract;
		n number(4) := 1;
		sbFullQuery VARCHAR2 (32000) := 'SELECT CT_jpb_contract.*, CT_jpb_contract.rowid FROM CT_jpb_contract';
		nuMaxTbRecords number(5):=ge_boparameter.fnuget('MAXREGSQUERY');
	BEGIN
		otbResult.delete;
		if isbQuery is not NULL and length(isbQuery) > 0 then
			sbFullQuery := sbFullQuery||' WHERE '||isbQuery;
		end if;

		open rfCT_jpb_contract for sbFullQuery;

		fetch rfCT_jpb_contract bulk collect INTO otbResult;

		close rfCT_jpb_contract;
		if otbResult.count = 0  then
			raise no_data_found;
		end if;

	EXCEPTION
		when no_data_found then
			Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription);
			raise ex.CONTROLLED_ERROR;
	END;
	FUNCTION frfGetRecords
	(
		isbCriteria in varchar2 default null,
		iblLock in boolean default false
	)
	RETURN tyRefCursor
	IS
		rfQuery tyRefCursor;
		sbSQL VARCHAR2 (32000) := 'select CT_jpb_contract.*, CT_jpb_contract.rowid FROM CT_jpb_contract';
	BEGIN
		if isbCriteria is not null then
			sbSQL := sbSQL||' where '||isbCriteria;
		end if;
		if iblLock then
			sbSQL := sbSQL||' for update nowait';
		end if;
		open rfQuery for sbSQL;
		return(rfQuery);
	EXCEPTION
		when no_data_found then
			Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription);
			raise ex.CONTROLLED_ERROR;
	END;
	PROCEDURE insRecord
	(
		ircCT_jpb_contract in styCT_jpb_contract
	)
	IS
		rirowid varchar2(200);
	BEGIN
		insRecord(ircCT_jpb_contract,rirowid);
	END;
	PROCEDURE insRecord
	(
		ircCT_jpb_contract in styCT_jpb_contract,
        orirowid   out varchar2
	)
	IS
	BEGIN
		if ircCT_jpb_contract.Contract_Id is NULL then
			Errors.SetError(cnuINS_PK_NULL,
			                fsbGetMessageDescription||'|Contract_Id');
			raise ex.controlled_error;
		end if;

		insert into CT_jpb_contract
		(
			Contract_Id,
			Description,
			Total_Amount,
			Overreaching_Percent,
			Contract_Type_Id,
			Contractor_Id
		)
		values
		(
			ircCT_jpb_contract.Contract_Id,
			ircCT_jpb_contract.Description,
			ircCT_jpb_contract.Total_Amount,
			ircCT_jpb_contract.Overreaching_Percent,
			ircCT_jpb_contract.Contract_Type_Id,
			ircCT_jpb_contract.Contractor_Id
		)
            returning
			rowid
		into
			orirowid;
		ClearMemory;
	EXCEPTION
		when dup_val_on_index then
			Errors.setError(cnuRECORD_ALREADY_EXIST,fsbGetMessageDescription||' '||fsbPrimaryKey(ircCT_jpb_contract));
			raise ex.CONTROLLED_ERROR;
	END;
	PROCEDURE insRecords
	(
		iotbCT_jpb_contract in out nocopy tytbCT_jpb_contract
	)
	IS
		blUseRowID boolean;
	BEGIN
		FillRecordOfTables(iotbCT_jpb_contract,blUseRowID);
		forall n in iotbCT_jpb_contract.first..iotbCT_jpb_contract.last
			insert into CT_jpb_contract
			(
				Contract_Id,
				Description,
				Total_Amount,
				Overreaching_Percent,
				Contract_Type_Id,
				Contractor_Id
			)
			values
			(
				rcRecOfTab.Contract_Id(n),
				rcRecOfTab.Description(n),
				rcRecOfTab.Total_Amount(n),
				rcRecOfTab.Overreaching_Percent(n),
				rcRecOfTab.Contract_Type_Id(n),
				rcRecOfTab.Contractor_Id(n)
			);
		ClearMemory;
	EXCEPTION
		when dup_val_on_index then
			Errors.setError(cnuRECORD_ALREADY_EXIST,fsbGetMessageDescription);
			raise ex.CONTROLLED_ERROR;
	END;
	PROCEDURE delRecord
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type,
		inuLock in number default 1
	)
	IS
		rcError styCT_jpb_contract;
	BEGIN
		rcError.Contract_Id := inuContract_Id;

		if inuLock=1 then
			LockByPk
			(
				inuContract_Id,
				rcData
			);
		end if;


		delete
		from CT_jpb_contract
		where
       		Contract_Id=inuContract_Id;
            if sql%notfound then
                raise no_data_found;
            end if;
		ClearMemory;
	EXCEPTION
		when no_data_found then
			Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '||fsbPrimaryKey(rcError));
         raise ex.CONTROLLED_ERROR;
		when ex.RECORD_HAVE_CHILDREN then
			Errors.setError(cnuRECORD_HAVE_CHILDREN,fsbGetMessageDescription||' '||fsbPrimaryKey(rcError));
			raise ex.CONTROLLED_ERROR;
	END;
	PROCEDURE delByRowID
	(
		iriRowID    in rowid,
		inuLock in number default 1
	)
	IS
		rcRecordNull cuRecord%rowtype;
		rcError  styCT_jpb_contract;
	BEGIN
		if inuLock=1 then
			LockByRowId(iriRowID,rcData);
		end if;


		delete
		from CT_jpb_contract
		where
			rowid = iriRowID
		returning
			Contract_Id
		into
			rcError.Contract_Id;
            if sql%notfound then
			 raise no_data_found;
		    end if;
            if rcData.rowID=iriRowID then
			 rcData := rcRecordNull;
		    end if;
		ClearMemory;
	EXCEPTION
		when no_data_found then
            Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' rowid=['||iriRowID||']');
            raise ex.CONTROLLED_ERROR;
		when ex.RECORD_HAVE_CHILDREN then
            Errors.setError(cnuRECORD_HAVE_CHILDREN,fsbGetMessageDescription||' '||' rowid=['||iriRowID||']');
            raise ex.CONTROLLED_ERROR;
	END;
	PROCEDURE delRecords
	(
		iotbCT_jpb_contract in out nocopy tytbCT_jpb_contract,
		inuLock in number default 1
	)
	IS
		blUseRowID boolean;
		rcAux styCT_jpb_contract;
	BEGIN
		FillRecordOfTables(iotbCT_jpb_contract, blUseRowID);
        if ( blUseRowId ) then
			if inuLock = 1 then
				for n in iotbCT_jpb_contract.first .. iotbCT_jpb_contract.last loop
					LockByRowId
					(
						rcRecOfTab.row_id(n),
						rcAux
					);
				end loop;
			end if;

			forall n in iotbCT_jpb_contract.first .. iotbCT_jpb_contract.last
				delete
				from CT_jpb_contract
				where
					rowid = rcRecOfTab.row_id(n);
		else
			if inuLock = 1 then
				for n in iotbCT_jpb_contract.first .. iotbCT_jpb_contract.last loop
					LockByPk
					(
						rcRecOfTab.Contract_Id(n),
						rcAux
					);
				end loop;
			end if;

			forall n in iotbCT_jpb_contract.first .. iotbCT_jpb_contract.last
				delete
				from CT_jpb_contract
				where
		         	Contract_Id = rcRecOfTab.Contract_Id(n);
		end if;
		ClearMemory;
	EXCEPTION
            when ex.RECORD_HAVE_CHILDREN then
                  Errors.setError(cnuRECORD_HAVE_CHILDREN,fsbGetMessageDescription);
                  raise ex.CONTROLLED_ERROR;
	END;
	PROCEDURE updRecord
	(
		ircCT_jpb_contract in styCT_jpb_contract,
		inuLock in number default 0
	)
	IS
		nuContract_Id	CT_jpb_contract.Contract_Id%type;
	BEGIN
		if ircCT_jpb_contract.rowid is not null then
			if inuLock=1 then
				LockByRowId(ircCT_jpb_contract.rowid,rcData);
			end if;
			update CT_jpb_contract
			set
				Description = ircCT_jpb_contract.Description,
				Total_Amount = ircCT_jpb_contract.Total_Amount,
				Overreaching_Percent = ircCT_jpb_contract.Overreaching_Percent,
				Contract_Type_Id = ircCT_jpb_contract.Contract_Type_Id,
				Contractor_Id = ircCT_jpb_contract.Contractor_Id
			where
				rowid = ircCT_jpb_contract.rowid
			returning
				Contract_Id
			into
				nuContract_Id;
		else
			if inuLock=1 then
				LockByPk
				(
					ircCT_jpb_contract.Contract_Id,
					rcData
				);
			end if;

			update CT_jpb_contract
			set
				Description = ircCT_jpb_contract.Description,
				Total_Amount = ircCT_jpb_contract.Total_Amount,
				Overreaching_Percent = ircCT_jpb_contract.Overreaching_Percent,
				Contract_Type_Id = ircCT_jpb_contract.Contract_Type_Id,
				Contractor_Id = ircCT_jpb_contract.Contractor_Id
			where
				Contract_Id = ircCT_jpb_contract.Contract_Id
			returning
				Contract_Id
			into
				nuContract_Id;
		end if;
		if
			nuContract_Id is NULL
		then
			raise no_data_found;
		end if;
		ClearMemory;
	EXCEPTION
		when no_data_found then
			Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||fsbPrimaryKey(ircCT_jpb_contract));
			raise ex.CONTROLLED_ERROR;
	END;
	PROCEDURE updRecords
	(
		iotbCT_jpb_contract in out nocopy tytbCT_jpb_contract,
		inuLock in number default 1
	)
	IS
		blUseRowID boolean;    
		rcAux styCT_jpb_contract;
	BEGIN
		FillRecordOfTables(iotbCT_jpb_contract,blUseRowID);
		if blUseRowID then
			if inuLock = 1 then
				for n in iotbCT_jpb_contract.first .. iotbCT_jpb_contract.last loop
					LockByRowId
					(
						rcRecOfTab.row_id(n),
						rcAux
					);
				end loop;
			end if;

			forall n in iotbCT_jpb_contract.first .. iotbCT_jpb_contract.last
				update CT_jpb_contract
				set
					Description = rcRecOfTab.Description(n),
					Total_Amount = rcRecOfTab.Total_Amount(n),
					Overreaching_Percent = rcRecOfTab.Overreaching_Percent(n),
					Contract_Type_Id = rcRecOfTab.Contract_Type_Id(n),
					Contractor_Id = rcRecOfTab.Contractor_Id(n)
				where
					rowid =  rcRecOfTab.row_id(n);
		else
			if inuLock = 1 then
				for n in iotbCT_jpb_contract.first .. iotbCT_jpb_contract.last loop
					LockByPk
					(
						rcRecOfTab.Contract_Id(n),
						rcAux
					);
				end loop;
			end if;

			forall n in iotbCT_jpb_contract.first .. iotbCT_jpb_contract.last
				update CT_jpb_contract
				SET
					Description = rcRecOfTab.Description(n),
					Total_Amount = rcRecOfTab.Total_Amount(n),
					Overreaching_Percent = rcRecOfTab.Overreaching_Percent(n),
					Contract_Type_Id = rcRecOfTab.Contract_Type_Id(n),
					Contractor_Id = rcRecOfTab.Contractor_Id(n)
				where
					Contract_Id = rcRecOfTab.Contract_Id(n)
;
		end if;
		ClearMemory;
	END;
	PROCEDURE updDescription
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type,
		isbDescription$ in CT_jpb_contract.Description%type,
		inuLock in number default 0
	)
	IS
		rcError styCT_jpb_contract;
	BEGIN
		rcError.Contract_Id := inuContract_Id;
		if inuLock=1 then
			LockByPk
			(
				inuContract_Id,
				rcData
			);
		end if;

		update CT_jpb_contract
		set
			Description = isbDescription$
		where
			Contract_Id = inuContract_Id;

		if sql%notfound then
			raise no_data_found;
		end if;

		rcData.Description:= isbDescription$;
		ClearMemory;

	EXCEPTION
		when no_data_found then
			Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '||fsbPrimaryKey(rcError));
			raise ex.CONTROLLED_ERROR;
	END;
	PROCEDURE updTotal_Amount
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type,
		inuTotal_Amount$ in CT_jpb_contract.Total_Amount%type,
		inuLock in number default 0
	)
	IS
		rcError styCT_jpb_contract;
	BEGIN
		rcError.Contract_Id := inuContract_Id;
		if inuLock=1 then
			LockByPk
			(
				inuContract_Id,
				rcData
			);
		end if;

		update CT_jpb_contract
		set
			Total_Amount = inuTotal_Amount$
		where
			Contract_Id = inuContract_Id;

		if sql%notfound then
			raise no_data_found;
		end if;

		rcData.Total_Amount:= inuTotal_Amount$;
		ClearMemory;

	EXCEPTION
		when no_data_found then
			Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '||fsbPrimaryKey(rcError));
			raise ex.CONTROLLED_ERROR;
	END;
	PROCEDURE updOverreaching_Percent
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type,
		inuOverreaching_Percent$ in CT_jpb_contract.Overreaching_Percent%type,
		inuLock in number default 0
	)
	IS
		rcError styCT_jpb_contract;
	BEGIN
		rcError.Contract_Id := inuContract_Id;
		if inuLock=1 then
			LockByPk
			(
				inuContract_Id,
				rcData
			);
		end if;

		update CT_jpb_contract
		set
			Overreaching_Percent = inuOverreaching_Percent$
		where
			Contract_Id = inuContract_Id;

		if sql%notfound then
			raise no_data_found;
		end if;

		rcData.Overreaching_Percent:= inuOverreaching_Percent$;
		ClearMemory;

	EXCEPTION
		when no_data_found then
			Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '||fsbPrimaryKey(rcError));
			raise ex.CONTROLLED_ERROR;
	END;
	PROCEDURE updContract_Type_Id
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type,
		inuContract_Type_Id$ in CT_jpb_contract.Contract_Type_Id%type,
		inuLock in number default 0
	)
	IS
		rcError styCT_jpb_contract;
	BEGIN
		rcError.Contract_Id := inuContract_Id;
		if inuLock=1 then
			LockByPk
			(
				inuContract_Id,
				rcData
			);
		end if;

		update CT_jpb_contract
		set
			Contract_Type_Id = inuContract_Type_Id$
		where
			Contract_Id = inuContract_Id;

		if sql%notfound then
			raise no_data_found;
		end if;

		rcData.Contract_Type_Id:= inuContract_Type_Id$;
		ClearMemory;

	EXCEPTION
		when no_data_found then
			Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '||fsbPrimaryKey(rcError));
			raise ex.CONTROLLED_ERROR;
	END;
	PROCEDURE updContractor_Id
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type,
		inuContractor_Id$ in CT_jpb_contract.Contractor_Id%type,
		inuLock in number default 0
	)
	IS
		rcError styCT_jpb_contract;
	BEGIN
		rcError.Contract_Id := inuContract_Id;
		if inuLock=1 then
			LockByPk
			(
				inuContract_Id,
				rcData
			);
		end if;

		update CT_jpb_contract
		set
			Contractor_Id = inuContractor_Id$
		where
			Contract_Id = inuContract_Id;

		if sql%notfound then
			raise no_data_found;
		end if;

		rcData.Contractor_Id:= inuContractor_Id$;
		ClearMemory;

	EXCEPTION
		when no_data_found then
			Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '||fsbPrimaryKey(rcError));
			raise ex.CONTROLLED_ERROR;
	END;
	FUNCTION fnuGetContract_Id
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type,
		inuRaiseError in number default 1
	)
	RETURN CT_jpb_contract.Contract_Id%type
	IS
		rcError styCT_jpb_contract;
	BEGIN

		rcError.Contract_Id := inuContract_Id;

        -- si usa cache y esta cargado retorna
		if  blDAO_USE_CACHE AND fblAlreadyLoaded(inuContract_Id) then
			 return(rcData.Contract_Id);
		end if;
		Load(inuContract_Id);
		return(rcData.Contract_Id);
	EXCEPTION
		when no_data_found then
			if inuRaiseError = 1 then
				Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '||fsbPrimaryKey(rcError));
				raise ex.CONTROLLED_ERROR;
			else
				return null;
			end if;
	END;
	FUNCTION fsbGetDescription
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type,
		inuRaiseError in number default 1
	)
	RETURN CT_jpb_contract.Description%type
	IS
		rcError styCT_jpb_contract;
	BEGIN

		rcError.Contract_Id := inuContract_Id;

        -- si usa cache y esta cargado retorna
		if  blDAO_USE_CACHE AND fblAlreadyLoaded(inuContract_Id) then
			 return(rcData.Description);
		end if;
		Load(inuContract_Id);
		return(rcData.Description);
	EXCEPTION
		when no_data_found then
			if inuRaiseError = 1 then
				Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '||fsbPrimaryKey(rcError));
				raise ex.CONTROLLED_ERROR;
			else
				return null;
			end if;
	END;
	FUNCTION fnuGetTotal_Amount
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type,
		inuRaiseError in number default 1
	)
	RETURN CT_jpb_contract.Total_Amount%type
	IS
		rcError styCT_jpb_contract;
	BEGIN

		rcError.Contract_Id := inuContract_Id;

        -- si usa cache y esta cargado retorna
		if  blDAO_USE_CACHE AND fblAlreadyLoaded(inuContract_Id) then
			 return(rcData.Total_Amount);
		end if;
		Load(inuContract_Id);
		return(rcData.Total_Amount);
	EXCEPTION
		when no_data_found then
			if inuRaiseError = 1 then
				Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '||fsbPrimaryKey(rcError));
				raise ex.CONTROLLED_ERROR;
			else
				return null;
			end if;
	END;
	FUNCTION fnuGetOverreaching_Percent
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type,
		inuRaiseError in number default 1
	)
	RETURN CT_jpb_contract.Overreaching_Percent%type
	IS
		rcError styCT_jpb_contract;
	BEGIN

		rcError.Contract_Id := inuContract_Id;

        -- si usa cache y esta cargado retorna
		if  blDAO_USE_CACHE AND fblAlreadyLoaded(inuContract_Id) then
			 return(rcData.Overreaching_Percent);
		end if;
		Load(inuContract_Id);
		return(rcData.Overreaching_Percent);
	EXCEPTION
		when no_data_found then
			if inuRaiseError = 1 then
				Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '||fsbPrimaryKey(rcError));
				raise ex.CONTROLLED_ERROR;
			else
				return null;
			end if;
	END;
	FUNCTION fnuGetContract_Type_Id
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type,
		inuRaiseError in number default 1
	)
	RETURN CT_jpb_contract.Contract_Type_Id%type
	IS
		rcError styCT_jpb_contract;
	BEGIN

		rcError.Contract_Id := inuContract_Id;

        -- si usa cache y esta cargado retorna
		if  blDAO_USE_CACHE AND fblAlreadyLoaded(inuContract_Id) then
			 return(rcData.Contract_Type_Id);
		end if;
		Load(inuContract_Id);
		return(rcData.Contract_Type_Id);
	EXCEPTION
		when no_data_found then
			if inuRaiseError = 1 then
				Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '||fsbPrimaryKey(rcError));
				raise ex.CONTROLLED_ERROR;
			else
				return null;
			end if;
	END;
	FUNCTION fnuGetContractor_Id
	(
		inuContract_Id in CT_jpb_contract.Contract_Id%type,
		inuRaiseError in number default 1
	)
	RETURN CT_jpb_contract.Contractor_Id%type
	IS
		rcError styCT_jpb_contract;
	BEGIN

		rcError.Contract_Id := inuContract_Id;

        -- si usa cache y esta cargado retorna
		if  blDAO_USE_CACHE AND fblAlreadyLoaded(inuContract_Id) then
			 return(rcData.Contractor_Id);
		end if;
		Load(inuContract_Id);
		return(rcData.Contractor_Id);
	EXCEPTION
		when no_data_found then
			if inuRaiseError = 1 then
				Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '||fsbPrimaryKey(rcError));
				raise ex.CONTROLLED_ERROR;
			else
				return null;
			end if;
	END;
	PROCEDURE SetUseCache
	(
		iblUseCache    in  boolean
	) IS
	Begin
	    blDAO_USE_CACHE := iblUseCache;
	END;

begin
    GetDAO_USE_CACHE;
end DACT_jpb_contract;
/