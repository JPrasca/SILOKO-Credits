CREATE OR REPLACE PACKAGE pktblJp_Estrato
is 
    ---------------
    -- VARIABLES
    ---------------
    -- Cursor para accesar Jp_Estrato
    cursor cuJp_Estrato
    (
		inuEstrcodi in Jp_Estrato.Estrcodi%type
    )
    is
        SELECT *
        FROM Jp_Estrato
        WHERE  Estrcodi = inuEstrcodi;


	-- Define colecciones de cada columna de la tabla 
	type tyEstrcodi is table of Jp_Estrato.Estrcodi%type index by binary_integer;
	type tyEstrdesc is table of Jp_Estrato.Estrdesc%type index by binary_integer;

    /* Tipo Tabla de records*/
    type tytbRowJp_Estrato is table of Jp_Estrato%rowtype index by binary_integer;

    type tytbJp_Estrato is record
	(
        Estrcodi tyEstrcodi,
        Estrdesc tyEstrdesc
	);


    ---------------
    -- METHODS
    ---------------

    FUNCTION fsbVersion
    RETURN varchar2;

	function fsbGetMessageDescription
	(
		inuMenscodi	IN number
	)
	return varchar2;

	PROCEDURE insRecord
	(
		ircRecord in Jp_Estrato%rowtype
	);

	PROCEDURE InsRecords
	(
		irctbRecord in out nocopy tytbJp_Estrato
	);

	PROCEDURE InsForEachColumn
	(
		inuEstrcodi in Jp_Estrato.Estrcodi%type,
		isbEstrdesc in Jp_Estrato.Estrdesc%type
	);

	PROCEDURE InsForEachColumnBulk
	(
		inuEstrcodi in out nocopy tyEstrcodi,
		isbEstrdesc in out nocopy tyEstrdesc
	);

	PROCEDURE ClearMemory;

	PROCEDURE DelRecord
	(
		inuEstrcodi in Jp_Estrato.Estrcodi%type
	);

	PROCEDURE UpRecord
	(
		ircRecord in Jp_Estrato%rowtype
	);

	PROCEDURE DelRecords
	(
		inuEstrcodi in out nocopy tyEstrcodi
	);

	FUNCTION fblExist
	(
		inuEstrcodi in Jp_Estrato.Estrcodi%type,
		inuCACHE in number default 1
	)
	RETURN boolean;

	FUNCTION frcGetRecord
	(
		inuEstrcodi in Jp_Estrato.Estrcodi%type,
		inuCACHE in number default 1
	)
	RETURN Jp_Estrato%rowtype;

	PROCEDURE AccKey
	(
		inuEstrcodi in Jp_Estrato.Estrcodi%type,
		inuCACHE in number default 1
	);

	PROCEDURE ValidateDupValues
	(
		inuEstrcodi in Jp_Estrato.Estrcodi%type,
		inuCACHE in number default 1
	);

	PROCEDURE UpdEstrdesc
	(
		inuEstrcodi in Jp_Estrato.Estrcodi%type,
		isbEstrdesc$ in Jp_Estrato.Estrdesc%type
	);

	function fnuGetEstrcodi
	(
		inuEstrcodi in Jp_Estrato.Estrcodi%type,
		inuCACHE in number default 1
	)
	RETURN Jp_Estrato.Estrcodi%type;

	function fsbGetEstrdesc
	(
		inuEstrcodi in Jp_Estrato.Estrcodi%type,
		inuCACHE in number default 1
	)
	RETURN Jp_Estrato.Estrdesc%type;


END pktblJp_Estrato;
/
CREATE OR REPLACE PACKAGE BODY pktblJp_Estrato
IS

   -------------------------
   -- PRIVATE VARIABLES
   -------------------------
   -- Record Tabla Jp_Estrato
   rcJp_Estrato cuJp_Estrato%rowtype;
   -- Record nulo de la Tabla Jp_Estrato
   rcRecordNull Jp_Estrato%rowtype;
   -----------------
   -- CONSTANTES
   -----------------
	csbVersion constant varchar2(20) := 'SAO414826';
	CACHE constant number := 1; -- Buscar en Cache
	-------------------------
	-- PRIVATE CONSTANTS
	-------------------------
   cnuRECORD_NO_EXISTE constant number(1) := 1; -- Reg. no esta en BD
	cnuRECORD_YA_EXISTE constant number(1) := 2; -- Reg. ya esta en BD
	cbsTable      constant varchar2(30) := 'JP_ESTRATO'; -- Nombre tabla
	cnuGeEntityId constant varchar2(30) := 9281; -- Id de Ge_entity
	-------------------------
	-- PRIVATE METHODS
	-------------------------
	function fsbGetMessageDescription
	(
		inuMenscodi	IN number
	)
	return varchar2
	is 
	      sbMessage varchar2(32000);
	      sbTableDescription varchar2(32000);
	BEGIN
	    if (cnuGeEntityId > 0 and dage_entity.fblExist (cnuGeEntityId))  then
	          sbTableDescription:= dage_entity.fsbGetDisplay_name(cnuGeEntityId);
	    end if;

		sbMessage := dage_message.fsbgetdescription(inuMenscodi);
	    if sbTableDescription is null then
	          sbMessage := replace(sbMessage,'%s1',cbsTable);
	    else
	          sbMessage := replace(sbMessage,'%s1','(' ||cbsTable||' - '||sbTableDescription ||')');
	    end if;
		return sbMessage ;
	END fsbGetMessageDescription;

	function fblInMemory
	(
		inuEstrcodi in Jp_Estrato.Estrcodi%type
	)
	RETURN boolean is
	BEGIN
		pkErrors.Push('pktblJp_Estrato.fblInMemory');
		if(
			rcJp_Estrato.Estrcodi = inuEstrcodi
		) then
			pkErrors.Pop;
			return(TRUE);
		end if;
		pkErrors.Pop;
		return( FALSE );
	END fblInMemory;

	procedure LoadRecord
	(
		inuEstrcodi in Jp_Estrato.Estrcodi%type
	) is
	BEGIN
		pkErrors.Push('pktblJp_Estrato.LoadRecord');
		if cuJp_Estrato%isopen then
			close cuJp_Estrato;
		end if;
		-- Accesa Jp_Estrato de la BD;
		open cuJp_Estrato(inuEstrcodi);

		fetch cuJp_Estrato into rcJp_Estrato;
		if ( cuJp_Estrato%notfound ) then 
			close cuJp_Estrato;
			pkErrors.Pop;
			rcJp_Estrato := rcRecordNull;
			return;
		end if;
		close cuJp_Estrato;
		pkErrors.Pop;
	END LoadRecord;

	procedure Load
	(
		inuEstrcodi in Jp_Estrato.Estrcodi%type
	) is
	BEGIN
		pkErrors.Push('pktblJp_Estrato.Load');
		LoadRecord(inuEstrcodi);

		-- Evalua si se encontro el registro en la Base de datos;
		if ( rcJp_Estrato.Estrcodi is null ) then
			pkErrors.Pop;
			raise NO_DATA_FOUND;
		end if;
		pkErrors.Pop;
	EXCEPTION
		when NO_DATA_FOUND then
			Errors.setbsserror(cnuRECORD_NO_EXISTE,fsbGetMessageDescription(cnuRECORD_NO_EXISTE));
			raise LOGIN_DENIED;
	END Load;

    FUNCTION fsbVersion
    RETURN varchar2
	IS
	BEGIN
		return csbVersion;
	END fsbVersion;

	PROCEDURE AccKey
	(
		inuEstrcodi in Jp_Estrato.Estrcodi%type,
		inuCACHE in number default 1
	)
	is
	BEGIN
		pkErrors.Push('pktblJp_Estrato.AccKey');
		-- Valida si debe buscar primero en memoria Cache
		if ( inuCACHE = CACHE ) then
            if ( fblInMemory(inuEstrcodi)) then
				pkErrors.Pop;
				return;
			end if;
		end if;

		Load(inuEstrcodi);
		pkErrors.Pop;
	EXCEPTION
		when LOGIN_DENIED then
			pkErrors.Pop;
			raise LOGIN_DENIED;
	END AccKey;

	procedure ClearMemory is
	BEGIN
		pkErrors.Push('pktblJp_Estrato.ClearMemory');
		rcJp_Estrato := rcRecordNull;
		pkErrors.Pop;
	END ClearMemory;

	PROCEDURE DelRecord
	(
		inuEstrcodi in Jp_Estrato.Estrcodi%type
	)	 is
	BEGIN
		pkErrors.Push('pktblJp_Estrato.DelRecord');
		-- Elimina registro de la Tabla Jp_Estrato
		DELETE Jp_Estrato
		WHERE
       		Estrcodi=inuEstrcodi;
		if ( sql%notfound ) then
			pkErrors.Pop;
			raise NO_DATA_FOUND;
		end if;
		ClearMemory;
		pkErrors.Pop;
	EXCEPTION
		when NO_DATA_FOUND then
			Errors.setbsserror(cnuRECORD_NO_EXISTE,fsbGetMessageDescription(cnuRECORD_NO_EXISTE));
			raise LOGIN_DENIED;
	END DelRecord;

	PROCEDURE DelRecords
	(
		inuEstrcodi in out nocopy tyEstrcodi
	) is
	BEGIN
		pkErrors.Push('pktblJp_Estrato.DelRecords');
		-- Elimina registro de la Tabla Jp_Estrato
		FORALL indx in inuEstrcodi.first .. inuEstrcodi.last
		DELETE Jp_Estrato
		WHERE 
            Estrcodi = inuEstrcodi(indx);
		if ( sql%notfound ) then
			pkErrors.Pop;
			raise NO_DATA_FOUND;
		end if;
		ClearMemory;
		pkErrors.Pop;
	EXCEPTION
		when NO_DATA_FOUND then
			Errors.setbsserror(cnuRECORD_NO_EXISTE,fsbGetMessageDescription(cnuRECORD_NO_EXISTE));
			raise LOGIN_DENIED;
	END DelRecords;

	PROCEDURE InsForEachColumn
	(
		inuEstrcodi in Jp_Estrato.Estrcodi%type,
		isbEstrdesc in Jp_Estrato.Estrdesc%type
	) is
	   rcRecord Jp_Estrato%rowtype;
	BEGIN
		pkErrors.Push('pktblJp_Estrato.InsForEachColumn');
		rcRecord.Estrcodi := inuEstrcodi;
		rcRecord.Estrdesc := isbEstrdesc;
		InsRecord( rcRecord );
		pkErrors.Pop;
	EXCEPTION
		when LOGIN_DENIED then
			pkErrors.Pop;
			raise LOGIN_DENIED;
	END InsForEachColumn;

	PROCEDURE InsForEachColumnBulk
	(
		inuEstrcodi in out nocopy tyEstrcodi,
		isbEstrdesc in out nocopy tyEstrdesc
	) is
	BEGIN
		pkErrors.Push('pktblJp_Estrato.InsForEachColumnBulk');
		FORALL indx in inuEstrcodi.first .. inuEstrcodi.last
		INSERT INTO Jp_Estrato
		(
			Estrcodi,
			Estrdesc
		)
		VALUES
		(
			inuEstrcodi(indx),
			isbEstrdesc(indx)
		);
		ClearMemory;
		pkErrors.Pop;
	EXCEPTION
		when DUP_VAL_ON_INDEX then
			Errors.setbsserror(cnuRECORD_YA_EXISTE,fsbGetMessageDescription(cnuRECORD_YA_EXISTE));
			pkErrors.Pop;
			raise LOGIN_DENIED;
	END InsForEachColumnBulk;

	PROCEDURE insRecord
	(
		ircRecord in Jp_Estrato%rowtype
	)
	is
	BEGIN
		pkErrors.Push('pktblJp_Estrato.InsRecord');
		INSERT INTO Jp_Estrato
		(
			Estrcodi,
			Estrdesc
		)
		VALUES
		(
			ircRecord.Estrcodi,
			ircRecord.Estrdesc
		);
		ClearMemory;
		pkErrors.Pop;
	EXCEPTION
		when DUP_VAL_ON_INDEX then
			Errors.setbsserror(cnuRECORD_YA_EXISTE,fsbGetMessageDescription(cnuRECORD_YA_EXISTE));
			pkErrors.Pop;
			raise LOGIN_DENIED;
	END InsRecord;

	PROCEDURE InsRecords
	(
		irctbRecord in out nocopy tytbJp_Estrato
	)
	is
	BEGIN
		pkErrors.Push('pktblJp_Estrato.InsRecords');
		FORALL indx in irctbRecord.Estrcodi.first .. irctbRecord.Estrcodi.last
		INSERT INTO Jp_Estrato
		(
			Estrcodi,
			Estrdesc
		)
		VALUES
		(
			irctbRecord.Estrcodi(indx),
			irctbRecord.Estrdesc(indx)
		);
		ClearMemory;
		pkErrors.Pop;
	EXCEPTION
		when DUP_VAL_ON_INDEX then
			Errors.setbsserror(cnuRECORD_YA_EXISTE,fsbGetMessageDescription(cnuRECORD_YA_EXISTE));
			pkErrors.Pop;
			raise LOGIN_DENIED;
	END InsRecords;

	PROCEDURE UpRecord
	(
		ircRecord in Jp_Estrato%rowtype
	)
	is
	BEGIN
		pkErrors.Push('pktblJp_Estrato.UpRecord');
		update Jp_Estrato
		SET
				Estrdesc = ircRecord.Estrdesc
		WHERE	Estrcodi = ircRecord.Estrcodi;
		if ( sql%notfound ) then
			pkErrors.Pop;
			raise NO_DATA_FOUND;
		end if;
		--Se limpia memoria
		ClearMemory;
		pkErrors.Pop;
	EXCEPTION
		when NO_DATA_FOUND then
			Errors.setbsserror(cnuRECORD_NO_EXISTE,fsbGetMessageDescription(cnuRECORD_NO_EXISTE));
			raise LOGIN_DENIED;
	END UpRecord;

	PROCEDURE ValidateDupValues
	(
		inuEstrcodi in Jp_Estrato.Estrcodi%type,
		inuCACHE in number default 1
	)
	is
	BEGIN
		pkErrors.Push('pktblJp_Estrato.ValidateDupValues');
		-- Valida si el registro ya existe
		if ( fblExist( inuEstrcodi, inuCACHE ) ) then
			Errors.setbsserror(cnuRECORD_YA_EXISTE,fsbGetMessageDescription(cnuRECORD_YA_EXISTE));
			raise LOGIN_DENIED;
		end if;
		pkErrors.Pop;
	EXCEPTION
		when LOGIN_DENIED then
			pkErrors.Pop;
			raise LOGIN_DENIED;
	END ValidateDupValues;

	FUNCTION fblExist
	(
		inuEstrcodi in Jp_Estrato.Estrcodi%type,
		inuCACHE in number default 1
	)
	RETURN boolean is
	BEGIN
		pkErrors.Push('pktblJp_Estrato.fblExist');
		-- Evalua si debe Buscar en memoria cache primero
		if ( inuCACHE = CACHE ) then
			if ( fblInMemory( inuEstrcodi) )
			then
				pkErrors.Pop;
				return( TRUE );
			end if;
		end if;
		LoadRecord( inuEstrcodi);
		if ( rcJp_Estrato.Estrcodi is null ) then
			pkErrors.Pop;
			return( FALSE );
		end if;
		pkErrors.Pop;
		return( TRUE );
	END fblExist;

	FUNCTION frcGetRecord
	(
		inuEstrcodi in Jp_Estrato.Estrcodi%type,
		inuCACHE in number default 1
	)
	RETURN Jp_Estrato%rowtype
	is
	BEGIN
		pkErrors.Push('pktblJp_Estrato.frcGetRecord');
		AccKey ( inuEstrcodi, inuCACHE);
		pkErrors.Pop;
		return ( rcJp_Estrato );
	EXCEPTION
		when LOGIN_DENIED then
			pkErrors.Pop;
			raise LOGIN_DENIED;
	END frcGetRecord;

	PROCEDURE UpdEstrdesc
	(
		inuEstrcodi in Jp_Estrato.Estrcodi%type,
		isbEstrdesc$ in Jp_Estrato.Estrdesc%type
	)
	is
	BEGIN
		pkErrors.Push('pktblJp_Estrato.UpdEstrdesc');
		UPDATE Jp_Estrato
		SET
			Estrdesc = isbEstrdesc$
		WHERE  Estrcodi = inuEstrcodi;
		if ( sql%notfound ) then
			pkErrors.Pop;
			raise NO_DATA_FOUND;
		end if;
		--Se limpia memoria
		ClearMemory;
		pkErrors.Pop;
	EXCEPTION
		when NO_DATA_FOUND then
			Errors.setbsserror(cnuRECORD_NO_EXISTE,fsbGetMessageDescription(cnuRECORD_NO_EXISTE));
			raise LOGIN_DENIED;
	END UpdEstrdesc;

	function fnuGetEstrcodi
	(
		inuEstrcodi in Jp_Estrato.Estrcodi%type,
		inuCACHE in number default 1
	)
	RETURN Jp_Estrato.Estrcodi%type
	is
	BEGIN
		pkErrors.Push('pktblJp_Estrato.fnuGetEstrcodi');
		AccKey ( inuEstrcodi, inuCACHE );
		pkErrors.Pop;
		return ( rcJp_Estrato.Estrcodi);
	EXCEPTION
		when LOGIN_DENIED then
			pkErrors.Pop;
			raise LOGIN_DENIED;
	END fnuGetEstrcodi;

	function fsbGetEstrdesc
	(
		inuEstrcodi in Jp_Estrato.Estrcodi%type,
		inuCACHE in number default 1
	)
	RETURN Jp_Estrato.Estrdesc%type
	is
	BEGIN
		pkErrors.Push('pktblJp_Estrato.fsbGetEstrdesc');
		AccKey ( inuEstrcodi, inuCACHE );
		pkErrors.Pop;
		return ( rcJp_Estrato.Estrdesc);
	EXCEPTION
		when LOGIN_DENIED then
			pkErrors.Pop;
			raise LOGIN_DENIED;
	END fsbGetEstrdesc;

end pktblJp_Estrato;
/