CREATE OR REPLACE PACKAGE DAOR_jpb_customer
is 
	/* Cursor general para acceso por Llave Primaria */
	CURSOR cuRecord 
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type
	)
	IS
		SELECT OR_jpb_customer.*,OR_jpb_customer.rowid
		FROM OR_jpb_customer
		WHERE  Customer_Id = inuCustomer_Id;


	/* Cursor general para acceso por RowId */
	CURSOR cuRecordByRowId
	(
		irirowid in varchar2
	)
	IS
        SELECT OR_jpb_customer.*,OR_jpb_customer.rowid
		FROM OR_jpb_customer
		WHERE 
			rowId = irirowid;


	/* Subtipos */
	subtype styOR_jpb_customer  is  cuRecord%rowtype;
	type    tyRefCursor is  REF CURSOR;

	/*Tipos*/
	type tytbOR_jpb_customer is table of styOR_jpb_customer index by binary_integer;
	type tyrfRecords is ref cursor return styOR_jpb_customer;

	/* Tipos referenciando al registro */
	type tytbCustomer_Id is table of OR_jpb_customer.Customer_Id%type index by binary_integer;
	type tytbDescription is table of OR_jpb_customer.Description%type index by binary_integer;
	type tytbDocument is table of OR_jpb_customer.Document%type index by binary_integer;
	type tytbStratum_Id is table of OR_jpb_customer.Stratum_Id%type index by binary_integer;
	type tytbRegistration_Date is table of OR_jpb_customer.Registration_Date%type index by binary_integer;
	type tytbHas_Quota is table of OR_jpb_customer.Has_Quota%type index by binary_integer;
	type tytbCity_Id is table of OR_jpb_customer.City_Id%type index by binary_integer;
	type tytbCountry_Id is table of OR_jpb_customer.Country_Id%type index by binary_integer;
	type tytbrowid is table of rowid index by binary_integer;

	type tyrcOR_jpb_customer is record
	(
		Customer_Id   tytbCustomer_Id,
		Description   tytbDescription,
		Document   tytbDocument,
		Stratum_Id   tytbStratum_Id,
		Registration_Date   tytbRegistration_Date,
		Has_Quota   tytbHas_Quota,
		City_Id   tytbCity_Id,
		Country_Id   tytbCountry_Id,
		row_id tytbrowid
	);


	/***** Metodos Publicos ****/

    FUNCTION fsbVersion
    RETURN varchar2;

	FUNCTION fsbGetMessageDescription
	return varchar2;

	PROCEDURE ClearMemory;

	FUNCTION fblExist
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type
	)
	RETURN boolean;

	PROCEDURE AccKey
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type
	);

	PROCEDURE AccKeyByRowId
	(
		iriRowID    in rowid
	);

	PROCEDURE ValDuplicate
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type
	);

	PROCEDURE getRecord
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type,
		orcRecord out nocopy styOR_jpb_customer
	);

	FUNCTION frcGetRcData
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type
	)
	RETURN styOR_jpb_customer;

	FUNCTION frcGetRcData
	RETURN styOR_jpb_customer;

	FUNCTION frcGetRecord
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type
	)
	RETURN styOR_jpb_customer;

	PROCEDURE getRecords 
	(
		isbQuery in varchar2,
		otbResult out nocopy tytbOR_jpb_customer
	);

	FUNCTION frfGetRecords
	(
		isbCriteria in varchar2 default null,
		iblLock in boolean default false
	)
	RETURN tyRefCursor;

	PROCEDURE insRecord
	(
		ircOR_jpb_customer in styOR_jpb_customer
	);

	PROCEDURE insRecord
	(
		ircOR_jpb_customer in styOR_jpb_customer,
        orirowid   out varchar2
	);

	PROCEDURE insRecords
	(
		iotbOR_jpb_customer in out nocopy tytbOR_jpb_customer
	);

	PROCEDURE delRecord
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type,
		inuLock in number default 1
	);

	PROCEDURE delByRowID
	(
		iriRowID    in rowid,
		inuLock in number default 1
	);

	PROCEDURE delRecords
	(
		iotbOR_jpb_customer in out nocopy tytbOR_jpb_customer,
		inuLock in number default 1
	);

	PROCEDURE updRecord
	(
		ircOR_jpb_customer in styOR_jpb_customer,
		inuLock in number default 0
	);

	PROCEDURE updRecords
	(
		iotbOR_jpb_customer in out nocopy tytbOR_jpb_customer,
		inuLock in number default 1
	);
	
	PROCEDURE updHasQuotaRecords
	(
		iotbOR_jpb_customer in out nocopy tytbOR_jpb_customer,
		inuLock in number default 1
	);

	PROCEDURE updDescription
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type,
		isbDescription$ in OR_jpb_customer.Description%type,
		inuLock in number default 0
	);

	PROCEDURE updDocument
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type,
		isbDocument$ in OR_jpb_customer.Document%type,
		inuLock in number default 0
	);

	PROCEDURE updStratum_Id
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type,
		inuStratum_Id$ in OR_jpb_customer.Stratum_Id%type,
		inuLock in number default 0
	);

	PROCEDURE updRegistration_Date
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type,
		idtRegistration_Date$ in OR_jpb_customer.Registration_Date%type,
		inuLock in number default 0
	);

	PROCEDURE updHas_Quota
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type,
		isbHas_Quota$ in OR_jpb_customer.Has_Quota%type,
		inuLock in number default 0
	);

	PROCEDURE updCity_Id
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type,
		inuCity_Id$ in OR_jpb_customer.City_Id%type,
		inuLock in number default 0
	);

	PROCEDURE updCountry_Id
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type,
		inuCountry_Id$ in OR_jpb_customer.Country_Id%type,
		inuLock in number default 0
	);

	FUNCTION fnuGetCustomer_Id
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type,
		inuRaiseError in number default 1
	)
	RETURN OR_jpb_customer.Customer_Id%type;

	FUNCTION fsbGetDescription
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type,
		inuRaiseError in number default 1
	)
	RETURN OR_jpb_customer.Description%type;

	FUNCTION fsbGetDocument
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type,
		inuRaiseError in number default 1
	)
	RETURN OR_jpb_customer.Document%type;

	FUNCTION fnuGetStratum_Id
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type,
		inuRaiseError in number default 1
	)
	RETURN OR_jpb_customer.Stratum_Id%type;

	FUNCTION fdtGetRegistration_Date
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type,
		inuRaiseError in number default 1
	)
	RETURN OR_jpb_customer.Registration_Date%type;

	FUNCTION fsbGetHas_Quota
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type,
		inuRaiseError in number default 1
	)
	RETURN OR_jpb_customer.Has_Quota%type;

	FUNCTION fnuGetCity_Id
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type,
		inuRaiseError in number default 1
	)
	RETURN OR_jpb_customer.City_Id%type;

	FUNCTION fnuGetCountry_Id
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type,
		inuRaiseError in number default 1
	)
	RETURN OR_jpb_customer.Country_Id%type;

	PROCEDURE LockByPk
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type,
		orcOR_jpb_customer  out styOR_jpb_customer
	);

	PROCEDURE LockByRowID
	(
		irirowid    in  varchar2,
		orcOR_jpb_customer  out styOR_jpb_customer
	);

	PROCEDURE SetUseCache
	(
		iblUseCache    in  boolean
	);
END DAOR_jpb_customer;
/
CREATE OR REPLACE PACKAGE BODY DAOR_jpb_customer
IS

    /*constantes locales al paquete*/
    cnuRECORD_NOT_EXIST constant number(1) := 1;
    cnuRECORD_ALREADY_EXIST constant number(1) := 2;
    cnuAPPTABLEBUSSY constant number(4) := 6951;
    cnuINS_PK_NULL constant number(4):= 1682;
    cnuRECORD_HAVE_CHILDREN constant number(4):= -2292;
    csbVersion   CONSTANT VARCHAR2(20) := 'SAO414826';
    csbTABLEPARAMETER   CONSTANT VARCHAR2(30) := 'OR_JPB_CUSTOMER';
	 cnuGeEntityId constant varchar2(30) := 10084; -- Id de Ge_entity

	/* Cursor para bloqueo de un registro por llave primaria */
	CURSOR cuLockRcByPk 
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type
	)
	IS
		SELECT OR_jpb_customer.*,OR_jpb_customer.rowid 
		FROM OR_jpb_customer
		WHERE  Customer_Id = inuCustomer_Id
		FOR UPDATE NOWAIT;

	/* Cursor para bloqueo de un registro por rowid */
	CURSOR cuLockRcbyRowId 
	(
		irirowid in varchar2
	)
	IS
		SELECT OR_jpb_customer.*,OR_jpb_customer.rowid 
		FROM OR_jpb_customer
		WHERE 
			rowId = irirowid
		FOR UPDATE NOWAIT;


	/*Tipos*/
	type tyrfOR_jpb_customer is ref cursor;

	/*Variables Globales*/
	rcRecOfTab tyrcOR_jpb_customer;

	rcData cuRecord%rowtype;

    blDAO_USE_CACHE    boolean := null;


	/* Metodos privados */
	FUNCTION fsbGetMessageDescription
	return varchar2
	is 
	      sbTableDescription varchar2(32000);
	BEGIN
	    if (cnuGeEntityId > 0 and dage_entity.fblExist (cnuGeEntityId))  then
	          sbTableDescription:= dage_entity.fsbGetDisplay_name(cnuGeEntityId);
	    else
	          sbTableDescription:= csbTABLEPARAMETER;
	    end if;

		return sbTableDescription ;
	END;
	PROCEDURE GetDAO_USE_CACHE
	IS
	BEGIN
	    if ( blDAO_USE_CACHE is null ) then
	        blDAO_USE_CACHE :=  ge_boparameter.fsbget('DAO_USE_CACHE') = 'Y';
	    end if;
	END;
	FUNCTION fsbPrimaryKey( rcI in styOR_jpb_customer default rcData )
	return varchar2
	IS
		sbPk varchar2(500);
	BEGIN
		sbPk:='[';
		sbPk:=sbPk||ut_convert.fsbToChar(rcI.Customer_Id);
		sbPk:=sbPk||']';
		return sbPk;
	END;
	PROCEDURE LockByPk
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type,
		orcOR_jpb_customer  out styOR_jpb_customer
	)
	IS
		rcError styOR_jpb_customer;
	BEGIN
		rcError.Customer_Id:=inuCustomer_Id;

		Open cuLockRcByPk(inuCustomer_Id);

		fetch cuLockRcByPk into orcOR_jpb_customer;
		if cuLockRcByPk%notfound  then
			close cuLockRcByPk;
			raise no_data_found;
		end if;
		close cuLockRcByPk ;
	EXCEPTION
		when no_data_found then
			if cuLockRcByPk%isopen then
				close cuLockRcByPk;
			end if;
			Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '|| fsbPrimaryKey(rcError));
			raise ex.CONTROLLED_ERROR;
		when ex.RESOURCE_BUSY THEN
			if cuLockRcByPk%isopen then
				close cuLockRcByPk;
			end if;
			errors.setError(cnuAPPTABLEBUSSY,fsbPrimaryKey(rcError)||'|'|| fsbGetMessageDescription );
			raise ex.controlled_error;
		when others then
			if cuLockRcByPk%isopen then
				close cuLockRcByPk;
			end if;
			raise;
	END;
	PROCEDURE LockByRowID
	(
		irirowid    in  varchar2,
		orcOR_jpb_customer  out styOR_jpb_customer
	)
	IS
	BEGIN
		Open cuLockRcbyRowId
		(
			irirowid
		);

		fetch cuLockRcbyRowId into orcOR_jpb_customer;
		if cuLockRcbyRowId%notfound  then
			close cuLockRcbyRowId;
			raise no_data_found;
		end if;
		close cuLockRcbyRowId;
	EXCEPTION
		when no_data_found then
			if cuLockRcbyRowId%isopen then
				close cuLockRcbyRowId;
			end if;
			Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' rowid=['||iriRowID||']');
			raise ex.CONTROLLED_ERROR;
		when ex.RESOURCE_BUSY THEN
			if cuLockRcbyRowId%isopen then
				close cuLockRcbyRowId;
			end if;
			errors.setError(cnuAPPTABLEBUSSY,'rowid=['||irirowid||']|'||fsbGetMessageDescription );
			raise ex.controlled_error;
		when others then
			if cuLockRcbyRowId%isopen then
				close cuLockRcbyRowId;
			end if;
			raise;
	END;
	PROCEDURE DelRecordOfTables
	(
		itbOR_jpb_customer  in out nocopy tytbOR_jpb_customer
	)
	IS
	BEGIN
			rcRecOfTab.Customer_Id.delete;
			rcRecOfTab.Description.delete;
			rcRecOfTab.Document.delete;
			rcRecOfTab.Stratum_Id.delete;
			rcRecOfTab.Registration_Date.delete;
			rcRecOfTab.Has_Quota.delete;
			rcRecOfTab.City_Id.delete;
			rcRecOfTab.Country_Id.delete;
			rcRecOfTab.row_id.delete;
	END;
	PROCEDURE FillRecordOfTables
	(
		itbOR_jpb_customer  in out nocopy tytbOR_jpb_customer,
		oblUseRowId out boolean
	)
	IS
	BEGIN
		DelRecordOfTables(itbOR_jpb_customer);

		for n in itbOR_jpb_customer.first .. itbOR_jpb_customer.last loop
			rcRecOfTab.Customer_Id(n) := itbOR_jpb_customer(n).Customer_Id;
			rcRecOfTab.Description(n) := itbOR_jpb_customer(n).Description;
			rcRecOfTab.Document(n) := itbOR_jpb_customer(n).Document;
			rcRecOfTab.Stratum_Id(n) := itbOR_jpb_customer(n).Stratum_Id;
			rcRecOfTab.Registration_Date(n) := itbOR_jpb_customer(n).Registration_Date;
			rcRecOfTab.Has_Quota(n) := itbOR_jpb_customer(n).Has_Quota;
			rcRecOfTab.City_Id(n) := itbOR_jpb_customer(n).City_Id;
			rcRecOfTab.Country_Id(n) := itbOR_jpb_customer(n).Country_Id;
			rcRecOfTab.row_id(n) := itbOR_jpb_customer(n).rowid;

			-- Indica si el rowid es Nulo
			oblUseRowId:=rcRecOfTab.row_id(n) is NOT NULL;
		end loop;
	END;

	PROCEDURE Load
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type
	)
	IS
		rcRecordNull cuRecord%rowtype;
	BEGIN
		if cuRecord%isopen then
			close cuRecord;
		end if;
		open cuRecord(inuCustomer_Id);

		fetch cuRecord into rcData;
		if cuRecord%notfound  then
			close cuRecord;
			rcData := rcRecordNull;
			raise no_data_found;
		end if;
		close cuRecord;
	END;
	PROCEDURE LoadByRowId
	(
		irirowid in varchar2
	)
	IS
		rcRecordNull cuRecordByRowId%rowtype;
	BEGIN
		if cuRecordByRowId%isopen then
			close cuRecordByRowId;
		end if;
		open cuRecordByRowId(irirowid);

		fetch cuRecordByRowId into rcData;
		if cuRecordByRowId%notfound  then
			close cuRecordByRowId;
			rcData := rcRecordNull;
			raise no_data_found;
		end if;
		close cuRecordByRowId;
	END;
	FUNCTION fblAlreadyLoaded
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type
	)
	RETURN boolean
	IS
	BEGIN
		if (
			inuCustomer_Id = rcData.Customer_Id
		   ) then
			return ( true );
		end if;
		return (false);
	END;

	/***** Fin metodos privados *****/

	/***** Metodos publicos ******/
    FUNCTION fsbVersion
    RETURN varchar2
	IS
	BEGIN
		return csbVersion;
	END;

	PROCEDURE ClearMemory
	IS
		rcRecordNull cuRecord%rowtype;
	BEGIN
		rcData := rcRecordNull;
	END;
	FUNCTION fblExist
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type
	)
	RETURN boolean
	IS
	BEGIN
		Load(inuCustomer_Id);
		return(TRUE);
	EXCEPTION
		when no_data_found then
			return(FALSE);
	END;
	PROCEDURE AccKey
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type
	)
	IS
		rcError styOR_jpb_customer;
	BEGIN
		rcError.Customer_Id:=inuCustomer_Id;

		Load(inuCustomer_Id);
	EXCEPTION
		when no_data_found then
			Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '||fsbPrimaryKey(rcError));
			raise ex.CONTROLLED_ERROR;
	END;
	PROCEDURE AccKeyByRowId
	(
		iriRowID    in rowid
	)
	IS
	BEGIN
		LoadByRowId(iriRowID);
	EXCEPTION
		when no_data_found then
            Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' rowid=['||iriRowID||']');
            raise ex.CONTROLLED_ERROR;
	END;
	PROCEDURE ValDuplicate
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type
	)
	IS
	BEGIN
		Load(inuCustomer_Id);
		Errors.setError(cnuRECORD_ALREADY_EXIST,fsbGetMessageDescription||' '||fsbPrimaryKey);
		raise ex.CONTROLLED_ERROR;

	EXCEPTION
		when no_data_found then
			null;
	END;
	PROCEDURE getRecord
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type,
		orcRecord out nocopy styOR_jpb_customer
	)
	IS
		rcError styOR_jpb_customer;
	BEGIN
		rcError.Customer_Id:=inuCustomer_Id;

		Load(inuCustomer_Id);
		orcRecord := rcData;
	EXCEPTION
		when no_data_found then
			Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '|| fsbPrimaryKey(rcError));
			raise ex.CONTROLLED_ERROR;
	END;
	FUNCTION frcGetRecord
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type
	)
	RETURN styOR_jpb_customer
	IS
		rcError styOR_jpb_customer;
	BEGIN
		rcError.Customer_Id:=inuCustomer_Id;

		Load(inuCustomer_Id);
		return(rcData);
	EXCEPTION
		when no_data_found then
			Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '|| fsbPrimaryKey(rcError));
			raise ex.CONTROLLED_ERROR;
	END;
	FUNCTION frcGetRcData
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type
	)
	RETURN styOR_jpb_customer
	IS
		rcError styOR_jpb_customer;
	BEGIN
		rcError.Customer_Id:=inuCustomer_Id;
        -- si usa cache y esta cargado retorna
		if  blDAO_USE_CACHE AND fblAlreadyLoaded(inuCustomer_Id) then
			 return(rcData);
		end if;
		Load(inuCustomer_Id);
		return(rcData);
	EXCEPTION
		when no_data_found then
			Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '|| fsbPrimaryKey(rcError));
			raise ex.CONTROLLED_ERROR;
	END;
	FUNCTION frcGetRcData
	RETURN styOR_jpb_customer
	IS
	BEGIN
		return(rcData);
	END;
	PROCEDURE getRecords
	(
		isbQuery in varchar2,
		otbResult out nocopy tytbOR_jpb_customer
	)
	IS
		rfOR_jpb_customer tyrfOR_jpb_customer;
		n number(4) := 1;
		sbFullQuery VARCHAR2 (32000) := 'SELECT OR_jpb_customer.*, OR_jpb_customer.rowid FROM OR_jpb_customer';
		nuMaxTbRecords number(5):=ge_boparameter.fnuget('MAXREGSQUERY');
	BEGIN
		otbResult.delete;
		if isbQuery is not NULL and length(isbQuery) > 0 then
			sbFullQuery := sbFullQuery||' WHERE '||isbQuery;
		end if;

		open rfOR_jpb_customer for sbFullQuery;

		fetch rfOR_jpb_customer bulk collect INTO otbResult;

		close rfOR_jpb_customer;
		if otbResult.count = 0  then
			raise no_data_found;
		end if;

	EXCEPTION
		when no_data_found then
			Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription);
			raise ex.CONTROLLED_ERROR;
	END;
	FUNCTION frfGetRecords
	(
		isbCriteria in varchar2 default null,
		iblLock in boolean default false
	)
	RETURN tyRefCursor
	IS
		rfQuery tyRefCursor;
		sbSQL VARCHAR2 (32000) := 'select OR_jpb_customer.*, OR_jpb_customer.rowid FROM OR_jpb_customer';
	BEGIN
		if isbCriteria is not null then
			sbSQL := sbSQL||' where '||isbCriteria;
		end if;
		if iblLock then
			sbSQL := sbSQL||' for update nowait';
		end if;
		open rfQuery for sbSQL;
		return(rfQuery);
	EXCEPTION
		when no_data_found then
			Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription);
			raise ex.CONTROLLED_ERROR;
	END;
	PROCEDURE insRecord
	(
		ircOR_jpb_customer in styOR_jpb_customer
	)
	IS
		rirowid varchar2(200);
	BEGIN
		insRecord(ircOR_jpb_customer,rirowid);
	END;
	PROCEDURE insRecord
	(
		ircOR_jpb_customer in styOR_jpb_customer,
        orirowid   out varchar2
	)
	IS
	BEGIN
		if ircOR_jpb_customer.Customer_Id is NULL then
			Errors.SetError(cnuINS_PK_NULL,
			                fsbGetMessageDescription||'|Customer_Id');
			raise ex.controlled_error;
		end if;

		insert into OR_jpb_customer
		(
			Customer_Id,
			Description,
			Document,
			Stratum_Id,
			Registration_Date,
			Has_Quota,
			City_Id,
			Country_Id
		)
		values
		(
			ircOR_jpb_customer.Customer_Id,
			ircOR_jpb_customer.Description,
			ircOR_jpb_customer.Document,
			ircOR_jpb_customer.Stratum_Id,
			ircOR_jpb_customer.Registration_Date,
			ircOR_jpb_customer.Has_Quota,
			ircOR_jpb_customer.City_Id,
			ircOR_jpb_customer.Country_Id
		)
            returning
			rowid
		into
			orirowid;
		ClearMemory;
	EXCEPTION
		when dup_val_on_index then
			Errors.setError(cnuRECORD_ALREADY_EXIST,fsbGetMessageDescription||' '||fsbPrimaryKey(ircOR_jpb_customer));
			raise ex.CONTROLLED_ERROR;
	END;
	PROCEDURE insRecords
	(
		iotbOR_jpb_customer in out nocopy tytbOR_jpb_customer
	)
	IS
		blUseRowID boolean;
	BEGIN
		FillRecordOfTables(iotbOR_jpb_customer,blUseRowID);
		forall n in iotbOR_jpb_customer.first..iotbOR_jpb_customer.last
			insert into OR_jpb_customer
			(
				Customer_Id,
				Description,
				Document,
				Stratum_Id,
				Registration_Date,
				Has_Quota,
				City_Id,
				Country_Id
			)
			values
			(
				rcRecOfTab.Customer_Id(n),
				rcRecOfTab.Description(n),
				rcRecOfTab.Document(n),
				rcRecOfTab.Stratum_Id(n),
				rcRecOfTab.Registration_Date(n),
				rcRecOfTab.Has_Quota(n),
				rcRecOfTab.City_Id(n),
				rcRecOfTab.Country_Id(n)
			);
		ClearMemory;
	EXCEPTION
		when dup_val_on_index then
			Errors.setError(cnuRECORD_ALREADY_EXIST,fsbGetMessageDescription);
			raise ex.CONTROLLED_ERROR;
	END;
	PROCEDURE delRecord
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type,
		inuLock in number default 1
	)
	IS
		rcError styOR_jpb_customer;
	BEGIN
		rcError.Customer_Id := inuCustomer_Id;

		if inuLock=1 then
			LockByPk
			(
				inuCustomer_Id,
				rcData
			);
		end if;


		delete
		from OR_jpb_customer
		where
       		Customer_Id=inuCustomer_Id;
            if sql%notfound then
                raise no_data_found;
            end if;
		ClearMemory;
	EXCEPTION
		when no_data_found then
			Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '||fsbPrimaryKey(rcError));
         raise ex.CONTROLLED_ERROR;
		when ex.RECORD_HAVE_CHILDREN then
			Errors.setError(cnuRECORD_HAVE_CHILDREN,fsbGetMessageDescription||' '||fsbPrimaryKey(rcError));
			raise ex.CONTROLLED_ERROR;
	END;
	PROCEDURE delByRowID
	(
		iriRowID    in rowid,
		inuLock in number default 1
	)
	IS
		rcRecordNull cuRecord%rowtype;
		rcError  styOR_jpb_customer;
	BEGIN
		if inuLock=1 then
			LockByRowId(iriRowID,rcData);
		end if;


		delete
		from OR_jpb_customer
		where
			rowid = iriRowID
		returning
			Customer_Id
		into
			rcError.Customer_Id;
            if sql%notfound then
			 raise no_data_found;
		    end if;
            if rcData.rowID=iriRowID then
			 rcData := rcRecordNull;
		    end if;
		ClearMemory;
	EXCEPTION
		when no_data_found then
            Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' rowid=['||iriRowID||']');
            raise ex.CONTROLLED_ERROR;
		when ex.RECORD_HAVE_CHILDREN then
            Errors.setError(cnuRECORD_HAVE_CHILDREN,fsbGetMessageDescription||' '||' rowid=['||iriRowID||']');
            raise ex.CONTROLLED_ERROR;
	END;
	PROCEDURE delRecords
	(
		iotbOR_jpb_customer in out nocopy tytbOR_jpb_customer,
		inuLock in number default 1
	)
	IS
		blUseRowID boolean;
		rcAux styOR_jpb_customer;
	BEGIN
		FillRecordOfTables(iotbOR_jpb_customer, blUseRowID);
        if ( blUseRowId ) then
			if inuLock = 1 then
				for n in iotbOR_jpb_customer.first .. iotbOR_jpb_customer.last loop
					LockByRowId
					(
						rcRecOfTab.row_id(n),
						rcAux
					);
				end loop;
			end if;

			forall n in iotbOR_jpb_customer.first .. iotbOR_jpb_customer.last
				delete
				from OR_jpb_customer
				where
					rowid = rcRecOfTab.row_id(n);
		else
			if inuLock = 1 then
				for n in iotbOR_jpb_customer.first .. iotbOR_jpb_customer.last loop
					LockByPk
					(
						rcRecOfTab.Customer_Id(n),
						rcAux
					);
				end loop;
			end if;

			forall n in iotbOR_jpb_customer.first .. iotbOR_jpb_customer.last
				delete
				from OR_jpb_customer
				where
		         	Customer_Id = rcRecOfTab.Customer_Id(n);
		end if;
		ClearMemory;
	EXCEPTION
            when ex.RECORD_HAVE_CHILDREN then
                  Errors.setError(cnuRECORD_HAVE_CHILDREN,fsbGetMessageDescription);
                  raise ex.CONTROLLED_ERROR;
	END;
	PROCEDURE updRecord
	(
		ircOR_jpb_customer in styOR_jpb_customer,
		inuLock in number default 0
	)
	IS
		nuCustomer_Id	OR_jpb_customer.Customer_Id%type;
	BEGIN
		if ircOR_jpb_customer.rowid is not null then
			if inuLock=1 then
				LockByRowId(ircOR_jpb_customer.rowid,rcData);
			end if;
			update OR_jpb_customer
			set
				Description = ircOR_jpb_customer.Description,
				Document = ircOR_jpb_customer.Document,
				Stratum_Id = ircOR_jpb_customer.Stratum_Id,
				Registration_Date = ircOR_jpb_customer.Registration_Date,
				Has_Quota = ircOR_jpb_customer.Has_Quota,
				City_Id = ircOR_jpb_customer.City_Id,
				Country_Id = ircOR_jpb_customer.Country_Id
			where
				rowid = ircOR_jpb_customer.rowid
			returning
				Customer_Id
			into
				nuCustomer_Id;
		else
			if inuLock=1 then
				LockByPk
				(
					ircOR_jpb_customer.Customer_Id,
					rcData
				);
			end if;

			update OR_jpb_customer
			set
				Description = ircOR_jpb_customer.Description,
				Document = ircOR_jpb_customer.Document,
				Stratum_Id = ircOR_jpb_customer.Stratum_Id,
				Registration_Date = ircOR_jpb_customer.Registration_Date,
				Has_Quota = ircOR_jpb_customer.Has_Quota,
				City_Id = ircOR_jpb_customer.City_Id,
				Country_Id = ircOR_jpb_customer.Country_Id
			where
				Customer_Id = ircOR_jpb_customer.Customer_Id
			returning
				Customer_Id
			into
				nuCustomer_Id;
		end if;
		if
			nuCustomer_Id is NULL
		then
			raise no_data_found;
		end if;
		ClearMemory;
	EXCEPTION
		when no_data_found then
			Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||fsbPrimaryKey(ircOR_jpb_customer));
			raise ex.CONTROLLED_ERROR;
	END;
	PROCEDURE updRecords
	(
		iotbOR_jpb_customer in out nocopy tytbOR_jpb_customer,
		inuLock in number default 1
	)
	IS
		blUseRowID boolean;    
		rcAux styOR_jpb_customer;
	BEGIN
		FillRecordOfTables(iotbOR_jpb_customer,blUseRowID);
		if blUseRowID then
			if inuLock = 1 then
				for n in iotbOR_jpb_customer.first .. iotbOR_jpb_customer.last loop
					LockByRowId
					(
						rcRecOfTab.row_id(n),
						rcAux
					);
				end loop;
			end if;

			forall n in iotbOR_jpb_customer.first .. iotbOR_jpb_customer.last
				update OR_jpb_customer
				set
					Description = rcRecOfTab.Description(n),
					Document = rcRecOfTab.Document(n),
					Stratum_Id = rcRecOfTab.Stratum_Id(n),
					Registration_Date = rcRecOfTab.Registration_Date(n),
					Has_Quota = rcRecOfTab.Has_Quota(n),
					City_Id = rcRecOfTab.City_Id(n),
					Country_Id = rcRecOfTab.Country_Id(n)
				where
					rowid =  rcRecOfTab.row_id(n);
		else
			if inuLock = 1 then
				for n in iotbOR_jpb_customer.first .. iotbOR_jpb_customer.last loop
					LockByPk
					(
						rcRecOfTab.Customer_Id(n),
						rcAux
					);
				end loop;
			end if;

			forall n in iotbOR_jpb_customer.first .. iotbOR_jpb_customer.last
				update OR_jpb_customer
				SET
					Description = rcRecOfTab.Description(n),
					Document = rcRecOfTab.Document(n),
					Stratum_Id = rcRecOfTab.Stratum_Id(n),
					Registration_Date = rcRecOfTab.Registration_Date(n),
					Has_Quota = rcRecOfTab.Has_Quota(n),
					City_Id = rcRecOfTab.City_Id(n),
					Country_Id = rcRecOfTab.Country_Id(n)
				where
					Customer_Id = rcRecOfTab.Customer_Id(n)
;
		end if;
		ClearMemory;
	END;
	
	PROCEDURE updHasQuotaRecords
	(
		iotbOR_jpb_customer in out nocopy tytbOR_jpb_customer,
		inuLock in number default 1
	)
	IS
		blUseRowID boolean;
		rcAux styOR_jpb_customer;
	BEGIN
		FillRecordOfTables(iotbOR_jpb_customer,blUseRowID);
		if blUseRowID then
			if inuLock = 1 then
				for n in iotbOR_jpb_customer.first .. iotbOR_jpb_customer.last loop
					LockByRowId
					(
						rcRecOfTab.row_id(n),
						rcAux
					);
				end loop;
			end if;

			forall n in iotbOR_jpb_customer.first .. iotbOR_jpb_customer.last
				update OR_jpb_customer
				set
					Has_Quota = rcRecOfTab.Has_Quota(n)
				where
					rowid =  rcRecOfTab.row_id(n);
		else
			if inuLock = 1 then
				for n in iotbOR_jpb_customer.first .. iotbOR_jpb_customer.last loop
					LockByPk
					(
						rcRecOfTab.Customer_Id(n),
						rcAux
					);
				end loop;
			end if;

			forall n in iotbOR_jpb_customer.first .. iotbOR_jpb_customer.last
				update OR_jpb_customer
				SET
					Has_Quota = rcRecOfTab.Has_Quota(n)
				where
					Customer_Id = rcRecOfTab.Customer_Id(n)
;
		end if;
		ClearMemory;
	END;
	
	PROCEDURE updDescription
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type,
		isbDescription$ in OR_jpb_customer.Description%type,
		inuLock in number default 0
	)
	IS
		rcError styOR_jpb_customer;
	BEGIN
		rcError.Customer_Id := inuCustomer_Id;
		if inuLock=1 then
			LockByPk
			(
				inuCustomer_Id,
				rcData
			);
		end if;

		update OR_jpb_customer
		set
			Description = isbDescription$
		where
			Customer_Id = inuCustomer_Id;

		if sql%notfound then
			raise no_data_found;
		end if;

		rcData.Description:= isbDescription$;
		ClearMemory;

	EXCEPTION
		when no_data_found then
			Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '||fsbPrimaryKey(rcError));
			raise ex.CONTROLLED_ERROR;
	END;
	PROCEDURE updDocument
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type,
		isbDocument$ in OR_jpb_customer.Document%type,
		inuLock in number default 0
	)
	IS
		rcError styOR_jpb_customer;
	BEGIN
		rcError.Customer_Id := inuCustomer_Id;
		if inuLock=1 then
			LockByPk
			(
				inuCustomer_Id,
				rcData
			);
		end if;

		update OR_jpb_customer
		set
			Document = isbDocument$
		where
			Customer_Id = inuCustomer_Id;

		if sql%notfound then
			raise no_data_found;
		end if;

		rcData.Document:= isbDocument$;
		ClearMemory;

	EXCEPTION
		when no_data_found then
			Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '||fsbPrimaryKey(rcError));
			raise ex.CONTROLLED_ERROR;
	END;
	PROCEDURE updStratum_Id
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type,
		inuStratum_Id$ in OR_jpb_customer.Stratum_Id%type,
		inuLock in number default 0
	)
	IS
		rcError styOR_jpb_customer;
	BEGIN
		rcError.Customer_Id := inuCustomer_Id;
		if inuLock=1 then
			LockByPk
			(
				inuCustomer_Id,
				rcData
			);
		end if;

		update OR_jpb_customer
		set
			Stratum_Id = inuStratum_Id$
		where
			Customer_Id = inuCustomer_Id;

		if sql%notfound then
			raise no_data_found;
		end if;

		rcData.Stratum_Id:= inuStratum_Id$;
		ClearMemory;

	EXCEPTION
		when no_data_found then
			Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '||fsbPrimaryKey(rcError));
			raise ex.CONTROLLED_ERROR;
	END;
	PROCEDURE updRegistration_Date
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type,
		idtRegistration_Date$ in OR_jpb_customer.Registration_Date%type,
		inuLock in number default 0
	)
	IS
		rcError styOR_jpb_customer;
	BEGIN
		rcError.Customer_Id := inuCustomer_Id;
		if inuLock=1 then
			LockByPk
			(
				inuCustomer_Id,
				rcData
			);
		end if;

		update OR_jpb_customer
		set
			Registration_Date = idtRegistration_Date$
		where
			Customer_Id = inuCustomer_Id;

		if sql%notfound then
			raise no_data_found;
		end if;

		rcData.Registration_Date:= idtRegistration_Date$;
		ClearMemory;

	EXCEPTION
		when no_data_found then
			Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '||fsbPrimaryKey(rcError));
			raise ex.CONTROLLED_ERROR;
	END;
	PROCEDURE updHas_Quota
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type,
		isbHas_Quota$ in OR_jpb_customer.Has_Quota%type,
		inuLock in number default 0
	)
	IS
		rcError styOR_jpb_customer;
	BEGIN
		rcError.Customer_Id := inuCustomer_Id;
		if inuLock=1 then
			LockByPk
			(
				inuCustomer_Id,
				rcData
			);
		end if;

		update OR_jpb_customer
		set
			Has_Quota = isbHas_Quota$
		where
			Customer_Id = inuCustomer_Id;

		if sql%notfound then
			raise no_data_found;
		end if;

		rcData.Has_Quota:= isbHas_Quota$;
		ClearMemory;

	EXCEPTION
		when no_data_found then
			Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '||fsbPrimaryKey(rcError));
			raise ex.CONTROLLED_ERROR;
	END;
	PROCEDURE updCity_Id
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type,
		inuCity_Id$ in OR_jpb_customer.City_Id%type,
		inuLock in number default 0
	)
	IS
		rcError styOR_jpb_customer;
	BEGIN
		rcError.Customer_Id := inuCustomer_Id;
		if inuLock=1 then
			LockByPk
			(
				inuCustomer_Id,
				rcData
			);
		end if;

		update OR_jpb_customer
		set
			City_Id = inuCity_Id$
		where
			Customer_Id = inuCustomer_Id;

		if sql%notfound then
			raise no_data_found;
		end if;

		rcData.City_Id:= inuCity_Id$;
		ClearMemory;

	EXCEPTION
		when no_data_found then
			Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '||fsbPrimaryKey(rcError));
			raise ex.CONTROLLED_ERROR;
	END;
	PROCEDURE updCountry_Id
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type,
		inuCountry_Id$ in OR_jpb_customer.Country_Id%type,
		inuLock in number default 0
	)
	IS
		rcError styOR_jpb_customer;
	BEGIN
		rcError.Customer_Id := inuCustomer_Id;
		if inuLock=1 then
			LockByPk
			(
				inuCustomer_Id,
				rcData
			);
		end if;

		update OR_jpb_customer
		set
			Country_Id = inuCountry_Id$
		where
			Customer_Id = inuCustomer_Id;

		if sql%notfound then
			raise no_data_found;
		end if;

		rcData.Country_Id:= inuCountry_Id$;
		ClearMemory;

	EXCEPTION
		when no_data_found then
			Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '||fsbPrimaryKey(rcError));
			raise ex.CONTROLLED_ERROR;
	END;
	FUNCTION fnuGetCustomer_Id
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type,
		inuRaiseError in number default 1
	)
	RETURN OR_jpb_customer.Customer_Id%type
	IS
		rcError styOR_jpb_customer;
	BEGIN

		rcError.Customer_Id := inuCustomer_Id;

        -- si usa cache y esta cargado retorna
		if  blDAO_USE_CACHE AND fblAlreadyLoaded(inuCustomer_Id) then
			 return(rcData.Customer_Id);
		end if;
		Load(inuCustomer_Id);
		return(rcData.Customer_Id);
	EXCEPTION
		when no_data_found then
			if inuRaiseError = 1 then
				Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '||fsbPrimaryKey(rcError));
				raise ex.CONTROLLED_ERROR;
			else
				return null;
			end if;
	END;
	FUNCTION fsbGetDescription
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type,
		inuRaiseError in number default 1
	)
	RETURN OR_jpb_customer.Description%type
	IS
		rcError styOR_jpb_customer;
	BEGIN

		rcError.Customer_Id := inuCustomer_Id;

        -- si usa cache y esta cargado retorna
		if  blDAO_USE_CACHE AND fblAlreadyLoaded(inuCustomer_Id) then
			 return(rcData.Description);
		end if;
		Load(inuCustomer_Id);
		return(rcData.Description);
	EXCEPTION
		when no_data_found then
			if inuRaiseError = 1 then
				Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '||fsbPrimaryKey(rcError));
				raise ex.CONTROLLED_ERROR;
			else
				return null;
			end if;
	END;
	FUNCTION fsbGetDocument
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type,
		inuRaiseError in number default 1
	)
	RETURN OR_jpb_customer.Document%type
	IS
		rcError styOR_jpb_customer;
	BEGIN

		rcError.Customer_Id := inuCustomer_Id;

        -- si usa cache y esta cargado retorna
		if  blDAO_USE_CACHE AND fblAlreadyLoaded(inuCustomer_Id) then
			 return(rcData.Document);
		end if;
		Load(inuCustomer_Id);
		return(rcData.Document);
	EXCEPTION
		when no_data_found then
			if inuRaiseError = 1 then
				Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '||fsbPrimaryKey(rcError));
				raise ex.CONTROLLED_ERROR;
			else
				return null;
			end if;
	END;
	FUNCTION fnuGetStratum_Id
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type,
		inuRaiseError in number default 1
	)
	RETURN OR_jpb_customer.Stratum_Id%type
	IS
		rcError styOR_jpb_customer;
	BEGIN

		rcError.Customer_Id := inuCustomer_Id;

        -- si usa cache y esta cargado retorna
		if  blDAO_USE_CACHE AND fblAlreadyLoaded(inuCustomer_Id) then
			 return(rcData.Stratum_Id);
		end if;
		Load(inuCustomer_Id);
		return(rcData.Stratum_Id);
	EXCEPTION
		when no_data_found then
			if inuRaiseError = 1 then
				Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '||fsbPrimaryKey(rcError));
				raise ex.CONTROLLED_ERROR;
			else
				return null;
			end if;
	END;
	FUNCTION fdtGetRegistration_Date
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type,
		inuRaiseError in number default 1
	)
	RETURN OR_jpb_customer.Registration_Date%type
	IS
		rcError styOR_jpb_customer;
	BEGIN

		rcError.Customer_Id := inuCustomer_Id;

        -- si usa cache y esta cargado retorna
		if  blDAO_USE_CACHE AND fblAlreadyLoaded(inuCustomer_Id) then
			 return(rcData.Registration_Date);
		end if;
		Load(inuCustomer_Id);
		return(rcData.Registration_Date);
	EXCEPTION
		when no_data_found then
			if inuRaiseError = 1 then
				Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '||fsbPrimaryKey(rcError));
				raise ex.CONTROLLED_ERROR;
			else
				return null;
			end if;
	END;
	FUNCTION fsbGetHas_Quota
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type,
		inuRaiseError in number default 1
	)
	RETURN OR_jpb_customer.Has_Quota%type
	IS
		rcError styOR_jpb_customer;
	BEGIN

		rcError.Customer_Id := inuCustomer_Id;

        -- si usa cache y esta cargado retorna
		if  blDAO_USE_CACHE AND fblAlreadyLoaded(inuCustomer_Id) then
			 return(rcData.Has_Quota);
		end if;
		Load(inuCustomer_Id);
		return(rcData.Has_Quota);
	EXCEPTION
		when no_data_found then
			if inuRaiseError = 1 then
				Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '||fsbPrimaryKey(rcError));
				raise ex.CONTROLLED_ERROR;
			else
				return null;
			end if;
	END;
	FUNCTION fnuGetCity_Id
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type,
		inuRaiseError in number default 1
	)
	RETURN OR_jpb_customer.City_Id%type
	IS
		rcError styOR_jpb_customer;
	BEGIN

		rcError.Customer_Id := inuCustomer_Id;

        -- si usa cache y esta cargado retorna
		if  blDAO_USE_CACHE AND fblAlreadyLoaded(inuCustomer_Id) then
			 return(rcData.City_Id);
		end if;
		Load(inuCustomer_Id);
		return(rcData.City_Id);
	EXCEPTION
		when no_data_found then
			if inuRaiseError = 1 then
				Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '||fsbPrimaryKey(rcError));
				raise ex.CONTROLLED_ERROR;
			else
				return null;
			end if;
	END;
	FUNCTION fnuGetCountry_Id
	(
		inuCustomer_Id in OR_jpb_customer.Customer_Id%type,
		inuRaiseError in number default 1
	)
	RETURN OR_jpb_customer.Country_Id%type
	IS
		rcError styOR_jpb_customer;
	BEGIN

		rcError.Customer_Id := inuCustomer_Id;

        -- si usa cache y esta cargado retorna
		if  blDAO_USE_CACHE AND fblAlreadyLoaded(inuCustomer_Id) then
			 return(rcData.Country_Id);
		end if;
		Load(inuCustomer_Id);
		return(rcData.Country_Id);
	EXCEPTION
		when no_data_found then
			if inuRaiseError = 1 then
				Errors.setError(cnuRECORD_NOT_EXIST,fsbGetMessageDescription||' '||fsbPrimaryKey(rcError));
				raise ex.CONTROLLED_ERROR;
			else
				return null;
			end if;
	END;
	PROCEDURE SetUseCache
	(
		iblUseCache    in  boolean
	) IS
	Begin
	    blDAO_USE_CACHE := iblUseCache;
	END;

begin
    GetDAO_USE_CACHE;
end DAOR_jpb_customer;
/
