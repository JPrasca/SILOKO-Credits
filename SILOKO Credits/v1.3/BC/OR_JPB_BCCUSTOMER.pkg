CREATE OR REPLACE PACKAGE OR_JPB_BCCustomer
IS
/*
    Propiedad intelectual de Open International Systems. (c)

    Paquete       : OR_JPB_BCCustomer

    Descripción   : Componente de negocio relacionados a la información de los clientes SILOKO.

    Autor         : Jesús David Prasca Bustos
    Fecha         : 02-05-2018

    Historia de Modificaciones
    Fecha         IDEntrega


    02-05-2018    jprascaSAO414826
    Creación
*/


	-- Declaracion de Tipos de datos publicos

    type tyrcCustomer IS record
    (
        customer_id or_jpb_customer.customer_id%type,
        country_id  or_jpb_customer.country_id%type,
        city_id     OR_jpb_customer.city_id%type,
        stratum_id  OR_jpb_customer.stratum_id%type,
        stay_time   or_jpb_constants_val.styNumber
    );
    
    type tytbCustomer IS table of tyrcCustomer index BY binary_integer;

	-- Declaracion de variables publicas

	-- Declaracion de metodos publicos
	
 /**********************************************************************
    Propiedad intelectual de OPEN International Systems
    Nombre:         FSBVERSION
    Descripción:    Obtiene la versión del paquete
    ***********************************************************************/
    FUNCTION FSBVERSION
    RETURN  VARCHAR2;


    /**********************************************************************
    Propiedad intelectual de OPEN International Systems
    Nombre:         GetCustomer
    Descripción:    Obtiene lo datos de un cliente SILOKO
    ***********************************************************************/
    PROCEDURE GetCustomer
    (
        inuCustomerID       in  or_jpb_customer.customer_id%TYPE,
        ocuDataCursor       out OR_JPB_CONSTANTS_VAL.tyRefCursor
    );



    /**********************************************************************
    Propiedad intelectual de OPEN International Systems
    Nombre:         GetCustomers
    Descripción:    Obtiene lo datos de uno o mas clientes SILOKO
    ***********************************************************************/
    PROCEDURE GetCustomers
    (
        inuCustomerId       in  OR_jpb_customer.customer_id%TYPE,
        isbCustomerDoc      in  or_jpb_customer.document%TYPE,
        isbDescription      in  OR_jpb_customer.description%TYPE,
        inuStratumId        in  or_jpb_customer.stratum_id%TYPE,
        ocuDataCursor       out OR_JPB_CONSTANTS_VAL.tyRefCursor
    );

    
    PROCEDURE InsertCustomer
    (
        sbName          or_jpb_customer.description%TYPE,
        sbDocument      or_jpb_customer.document%TYPE,
        sbRegistration  or_jpb_customer.registration_date%TYPE,
        sbStratumId     or_jpb_customer.stratum_id%TYPE
    );



    /**********************************************************************
    Propiedad intelectual de OPEN International Systems
    Nombre:         GetGranularTbCustomer
    Descripción:    Obtiene los datos de un grupo de clientes
    ***********************************************************************/
    PROCEDURE GetGranularTbCustomer
    (
        inuPivot        IN   OR_jpb_customer.customer_id%type,
        otbCustomerIn   OUT   or_jpb_bccustomer.tytbCustomer,
        isbhasQuota     IN   or_jpb_customer.has_quota%type default or_jpb_constants_val.csbYES
    );

END OR_JPB_BCCustomer;
/
CREATE OR REPLACE PACKAGE BODY OR_JPB_BCCustomer
IS

    /*
    Propiedad intelectual de Open International Systems. (c)

    Paquete       : OR_JPB_BCCustomer

    Descripción   : Componente de negocio relacionados a la información de los clientes SILOKO.

    Autor         : Jesús David Prasca Bustos
    Fecha         : 02-05-2018

    Historia de Modificaciones
    Fecha         IDEntrega
    
    
    02-05-2018    jprascaSAO414826
    Creación
    */

	-- Declaracion de variables y tipos globales privados del paquete
    CSBVERSION                  CONSTANT VARCHAR2(10) := or_jpb_constants_val.csbVersion;
    cnuDomainYesNot             CONSTANT ge_domain_values.domain_values_id%type := or_jpb_constants_val.cnuDomainYesNot;


	-- Definicion de metodos publicos y privados del paquete


/*******************************************************************************
    Propiedad intelectual de Open International Systems. (c)

    Método:       : FSBVERSION

    Descripción   : Función pública que se usa para obtener la versión del paquete

    Parámetros    :

    Retorno       : CSBVERSION - retorna la variable que contiene la versión

    Autor         : Jesús David Prasca Bustos
    Fecha         : 02-05-2018

    Historia de Modificaciones
    Fecha         IDEntrega

    02-05-2018    jprascaSAO414826
    Creación
*******************************************************************************/
    FUNCTION FSBVERSION
    RETURN VARCHAR2 IS
    BEGIN
        return CSBVERSION;
    END FSBVERSION;

/*******************************************************************************
    Propiedad intelectual de Open International Systems. (c)

    Método:       : GetCustomer

    Descripción   : Procedimiento público que obtiene los datos de un cliente SILOKO

    Parámetros    : inuCustomerID   -   Identificador del cliente SILOKO
                    ocuDataCursor   -   CURSOR que captura los datos

    Retorno       :

    Autor         : Jesús David Prasca Bustos
    Fecha         : 02-05-2018

    Historia de Modificaciones
    Fecha         IDEntrega

    02-05-2018    jprascaSAO414826
    Creación
*******************************************************************************/
    PROCEDURE GetCustomer
    (
        inuCustomerID       in  or_jpb_customer.customer_id%TYPE,
        ocuDataCursor       out OR_JPB_CONSTANTS_VAL.tyRefCursor
    )
    IS
    BEGIN
        ut_trace.trace('Inicia OR_JPB_BCCustomer.GetCustomer', 7);

        open ocuDataCursor for
            SELECT
                /*+ index(OR_JPB_CUSTOMER PK_OR_JPB_CUSTOMER)*/
                or_jpb_customer.customer_id,
                or_jpb_customer.document,
                or_jpb_customer.description,
                OR_jpb_customer.stratum_id,
                or_jpb_customer.registration_date,
                null Parent
            FROM
                or_jpb_customer
            WHERE
                or_jpb_customer.customer_id = inuCustomerID;

        ut_trace.trace('Termina OR_JPB_BCCustomer.GetCustomer', 7);
    EXCEPTION
        when ex.CONTROLLED_ERROR then
            ut_trace.trace('Termina ex.CONTROLLED_ERROR OR_JPB_BCCustomer.GetCustomer', 7);
            raise ex.CONTROLLED_ERROR;
        when others then
            ut_trace.trace('Termina others OR_JPB_BCCustomer.GetCustomer', 7);
            Errors.setError;
            raise ex.CONTROLLED_ERROR;
    END GetCustomer;



/*******************************************************************************
    Propiedad intelectual de Open International Systems. (c)

    Método:       : GetContracts

    Descripción   : Procedimiento público que obtiene los datos de varios clientes
                    que cumplen con los criterios de búsqueda

    Parámetros    : inuCustomerId   -   Identificador del cliente
                    isbCustomerDoc  -   Identificador del documento de identidad
                    isbDescription  -   Nombre del cliente
                    inuStratumIdo   -   Identificador del estrato
                    ocuDataCursor   -   CURSOR que toma los datos

    Retorno       :

    Autor         : Jesús David Prasca Bustos
    Fecha         : 02-05-2018

    Historia de Modificaciones
    Fecha         IDEntrega

    02-05-2018    jprascaSAO414826
    Creación
*******************************************************************************/
    PROCEDURE GetCustomers
    (
        inuCustomerId       in  OR_jpb_customer.customer_id%TYPE,
        isbCustomerDoc      in  or_jpb_customer.document%TYPE,
        isbDescription      in  OR_jpb_customer.description%TYPE,
        inuStratumId        in  or_jpb_customer.stratum_id%TYPE,
        ocuDataCursor       out OR_JPB_CONSTANTS_VAL.tyRefCursor
    )
    IS
        sbSQL               ut_statement.rtyStatement;
        sbBind              ut_statement.rtyStatement;
        sbWhere             ut_statement.rtyStatement;
        sbRecordBind        ut_statement.rtyStatement;
        sbHint              ut_statement.rtyStatement;
        
    BEGIN


        ut_trace.trace('Inicia OR_JPB_BCCustomer.GetCustomers', 7);
        
        sbWhere := '';
        sbHint  := '';
        
        IF inuCustomerId IS not null THEN
            sbWhere := 'OR_jpb_customer.customer_id = :inuCustomerId ';
            sbBind  := inuCustomerId;
            sbHint  := 'index(OR_JPB_CUSTOMER PK_OR_JPB_CUSTOMER)';
        END IF;
        
        IF isbCustomerDoc IS not null THEN
            IF sbWhere IS NOT null THEN
                sbWhere := sbWhere || ' AND ';
                sbBind  := sbBind || ','''||isbCustomerDoc||'''';
            ELSE
                sbHint  :=  'index(OR_JPB_CUSTOMER UX_OR_JPB_CUSTOMER03)';
                sbBind  := ''''||isbCustomerDoc||'''';
            END IF;

            sbWhere :=  sbWhere || chr(10) ||
                        'OR_JPB_CUSTOMER.document like :isbCustomerDoc ||' ||chr(39) || '%' || chr(39) || chr(10);

        END IF;
        
        IF inuStratumId IS not null THEN
            IF sbWhere IS NOT null THEN
                sbWhere := sbWhere || ' AND ';
                sbBind  := sbBind || ','||inuStratumId||'';
            ELSE
                sbHint  :=  'index(OR_JPB_CUSTOMER IDX_OR_JPB_CUSTOMER01)';
                sbBind  := ''||inuStratumId||'';
            END IF;

            sbWhere :=  sbWhere || chr(10) ||
                        'OR_JPB_CUSTOMER.stratum_id = :inuStratumId' || chr(10);

        END IF;

         IF isbDescription IS not null THEN
            IF sbWhere IS NOT null THEN
                sbWhere := sbWhere || ' AND ';
                sbBind  := sbBind || ','''||isbDescription||'''';
            ELSE
                sbHint  :=  'index(OR_JPB_CUSTOMER UX_OR_JPB_CUSTOMER01)';
                sbBind  := ''''||isbDescription||'''';
            END IF;

            sbWhere :=  sbWhere || chr(10) ||
                        ' UPPER(OR_JPB_CUSTOMER.description) like :isbDescription ||' ||chr(39) || '%' || chr(39);

        END IF;

        sbSQL := 'SELECT /*+ '||
                        sbHint||'*/'||chr(10)||
        '                       or_jpb_customer.customer_id,
                              or_jpb_customer.document,
                              or_jpb_customer.description,
                        OR_jpb_customer.stratum_id,
                        or_jpb_customer.registration_date,
                        null parent_id
                  FROM  or_jpb_customer
                        /*+ OR_JPB_BCCustomer.GetCustomers*/
                  WHERE ' || sbWhere;
        ut_trace.trace('Binds ' || sbBind,8);
        sbRecordBind := 'BEGIN Open :cuCursor for :sbCurrentSql using ' || sbBind || ';  END;';
        execute immediate sbRecordBind using ocuDataCursor,sbSQL;
        dbms_output.put_Line(sbSQL);
        dbms_output.put_Line('');
        dbms_output.put_Line(sbBind);
        dbms_output.put_Line('');
        dbms_output.put_Line(sbRecordBind);
        dbms_output.put_Line('');
        ut_trace.trace('Termina CT_JPB_BCCustomer.GetCustomers', 7);
    EXCEPTION
        when ex.CONTROLLED_ERROR then
            ut_trace.trace('Termina ex.CONTROLLED_ERROR OR_JPB_BCCustomer.GetCustomers', 7);
            raise ex.CONTROLLED_ERROR;
        when others then
            ut_trace.trace('Termina others OR_JPB_BCCustomer.GetCustomers', 7);
            Errors.setError;
            raise ex.CONTROLLED_ERROR;
    END GetCustomers;
    
    
    
    PROCEDURE InsertCustomer
    (
        sbName          or_jpb_customer.description%TYPE,
        sbDocument      or_jpb_customer.document%TYPE,
        sbRegistration  or_jpb_customer.registration_date%TYPE,
        sbStratumId     or_jpb_customer.stratum_id%TYPE
    )
    IS
    BEGIN
        ut_trace.trace('Inicia CT_JPB_BCCustomer.InsertCustomer', 7);
        null; /*no implementado aún*/
        ut_trace.trace('Termina CT_JPB_BCCustomer.InsertCustomer', 7);
    EXCEPTION
        when ex.CONTROLLED_ERROR then
            ut_trace.trace('Termina ex.CONTROLLED_ERROR OR_JPB_BCCustomer.InsertCustomer', 7);
            raise ex.CONTROLLED_ERROR;
        when others then
            ut_trace.trace('Termina others OR_JPB_BCCustomer.InsertCustomer', 7);
            Errors.setError;
            raise ex.CONTROLLED_ERROR;
    END InsertCustomer;


    
    PROCEDURE GetGranularTbCustomer
    (
        inuPivot        IN   OR_jpb_customer.customer_id%type,
        otbCustomerIn   OUT  or_jpb_bccustomer.tytbCustomer,
        isbhasQuota     IN   or_jpb_customer.has_quota%type default or_jpb_constants_val.csbYES
    )
    IS
        CURSOR cuCustomers
        (
            nuPivot         OR_jpb_customer.customer_id%type,
            sbhasQuota      or_jpb_customer.has_quota%type
        )
        IS
            SELECT
                /*+ INDEX(OR_JPB_CUSTOMER IDX_OR_JPB_CUSTOMER03)*/
                or_jpb_customer.customer_id,
                or_jpb_customer.country_id,
                OR_jpb_customer.city_id,
                OR_jpb_customer.stratum_id,
                round((ut_date.fdtSysdate-OR_jpb_customer.registration_date)/365) stay_time
            FROM
                OR_jpb_customer
            WHERE
                OR_jpb_customer.has_quota = sbhasQuota
            AND
                OR_jpb_customer.customer_id >= nuPivot;

    BEGIN
        ut_trace.trace('Inicia CT_JPB_BCCustomer.GetGranularTbCustomer', 7);

        IF cuCustomers%isopen
        THEN
            close cuCustomers;
        END IF;

        open cuCustomers(inuPivot, isbhasQuota);

        FETCH cuCustomers BULK COLLECT INTO otbCustomerIn LIMIT or_jpb_constants_val.cnuLimit;

        close cuCustomers;

        ut_trace.trace('Termina CT_JPB_BCCustomer.GetGranularTbCustomer', 7);
    EXCEPTION
        when ex.CONTROLLED_ERROR then
            IF cuCustomers%isopen
            THEN
                close cuCustomers;
            END IF;
            ut_trace.trace('Termina ex.CONTROLLED_ERROR OR_JPB_BCCustomer.GetGranularTbCustomer', 7);
            raise ex.CONTROLLED_ERROR;
        when others then
            IF cuCustomers%isopen
            THEN
                close cuCustomers;
            END IF;
            ut_trace.trace('Termina others OR_JPB_BCCustomer.GetGranularTbCustomer', 7);
            Errors.setError;
            raise ex.CONTROLLED_ERROR;
    END GetGranularTbCustomer;


END OR_JPB_BCCustomer;
/
